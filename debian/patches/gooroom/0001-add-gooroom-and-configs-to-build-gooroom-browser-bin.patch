From 398816b44568c396394d071649e005f1b85d17a7 Mon Sep 17 00:00:00 2001
From: junsungc <junsungc91@gmail.com>
Date: Tue, 20 Apr 2021 13:26:08 +0900
Subject: [PATCH 01/84] add /gooroom and configs to build gooroom-browser
 binary

---
 BUILD.gn                                      |   2 +
 build/config/compiler/BUILD.gn                |   3 +
 .../browser/chrome_content_browser_client.h   |   2 +-
 gooroom/BUILD.gn                              | 384 +++++++++
 gooroom/app/gooroom_exe_main_aura.cc          |  22 +
 gooroom/app/gooroom_main.cc                   | 115 +++
 gooroom/app/gooroom_main_delegate.cc          |  86 ++
 gooroom/app/gooroom_main_delegate.h           |  51 ++
 gooroom/browser/BUILD.gn                      |  20 +
 .../browser/gooroom_content_browser_client.cc | 766 ++++++++++++++++++
 .../browser/gooroom_content_browser_client.h  |  26 +
 gooroom/browser/gooroom_content_client.cc     |   1 +
 gooroom/browser/gooroom_content_client.h      |  13 +
 13 files changed, 1490 insertions(+), 1 deletion(-)
 create mode 100644 gooroom/BUILD.gn
 create mode 100644 gooroom/app/gooroom_exe_main_aura.cc
 create mode 100644 gooroom/app/gooroom_main.cc
 create mode 100644 gooroom/app/gooroom_main_delegate.cc
 create mode 100644 gooroom/app/gooroom_main_delegate.h
 create mode 100644 gooroom/browser/BUILD.gn
 create mode 100644 gooroom/browser/gooroom_content_browser_client.cc
 create mode 100644 gooroom/browser/gooroom_content_browser_client.h
 create mode 100644 gooroom/browser/gooroom_content_client.cc
 create mode 100644 gooroom/browser/gooroom_content_client.h

diff --git a/BUILD.gn b/BUILD.gn
index f6ef59d0f..ef76116f6 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -159,6 +159,8 @@ group("gn_all") {
       "//ui/accessibility:accessibility_unittests",
       "//ui/accessibility/extensions:extension_tests",
       "//ui/accessibility/extensions:extensions",
+      "//gooroom:gooroom-browser",
+      "//gooroom/browser:gooroom_browser",
     ]
   }
 
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index a40c9d5b6..be4afd968 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -241,6 +241,9 @@ config("compiler") {
   defines = []
   configs = []
 
+# TODO move into gooroom's and check ^^^^^ by gooroom
+  defines += [ "GOOROOM_BUILD" ]
+
   # System-specific flags. If your compiler flags apply to one of the
   # categories here, add it to the associated file to keep this shared config
   # smaller.
diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
index 792e69483..8cfb93193 100644
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -736,6 +736,7 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   bool HasErrorPage(int http_status_code) override;
 
   StartupData* startup_data() { return &startup_data_; }
+  StartupData startup_data_;
 
   std::unique_ptr<content::IdentityRequestDialogController>
   CreateIdentityRequestDialogController() override;
@@ -822,7 +823,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   scoped_refptr<safe_browsing::UrlCheckerDelegate>
       safe_browsing_url_checker_delegate_;
 
-  StartupData startup_data_;
 
 #if !defined(OS_ANDROID)
   std::unique_ptr<ChromeSerialDelegate> serial_delegate_;
diff --git a/gooroom/BUILD.gn b/gooroom/BUILD.gn
new file mode 100644
index 000000000..6d8d5945c
--- /dev/null
+++ b/gooroom/BUILD.gn
@@ -0,0 +1,384 @@
+# Copyright 2014 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//build/config/chrome_build.gni")
+import("//build/config/compiler/compiler.gni")
+import("//build/config/compiler/pgo/pgo.gni")
+import("//build/config/linux/pangocairo/pangocairo.gni")
+import("//build/config/locales.gni")
+import("//build/config/sanitizers/sanitizers.gni")
+import("//build/config/ui.gni")
+import("//build/config/win/console_app.gni")
+import("//build/config/win/manifest.gni")
+import("//build/toolchain/toolchain.gni")
+import("//chrome/chrome_paks.gni")
+import("//chrome/common/features.gni")
+import("//chrome/process_version_rc_template.gni")
+import("//components/nacl/features.gni")
+import("//media/media_options.gni")
+import("//third_party/widevine/cdm/widevine.gni")
+import("//tools/resources/generate_resource_allowlist.gni")
+import("//v8/gni/v8.gni")
+
+if (is_android) {
+  import("//build/config/android/rules.gni")
+} else if (is_mac) {
+  import("//build/compiled_action.gni")
+  import("//build/config/mac/rules.gni")
+  import("//build/config/mac/symbols.gni")
+  import("//build/mac/tweak_info_plist.gni")
+  import("//build/util/branding.gni")
+  import("//build/util/version.gni")
+  import("//media/cdm/ppapi/cdm_paths.gni")
+  import("//third_party/icu/config.gni")
+}
+
+assert(!is_ios, "Chromium/iOS shouldn't use anything in //chrome")
+
+if (enable_resource_allowlist_generation) {
+  chrome_resource_allowlist = "$target_gen_dir/chrome_resource_allowlist.txt"
+}
+
+# This target exists above chrome and it's main components in the dependency
+# tree as a central place to put assert_no_deps annotations. Since this depends
+# on Chrome and the main DLLs it uses, it will transitively assert that those
+# targets also have no deps on disallowed things.
+group("assert_no_deps") {
+  deps = []
+
+  if (is_android) {
+    deps += [ "//chrome/android:chrome_public_apk" ]
+  } else {
+    #deps += [ ":chrome" ]
+    deps += [ "//chrome:chrome" ]
+  }
+
+  if (is_win) {
+    deps += [
+      ":chrome_dll",
+      ":main_dll",
+    ]
+  }
+
+  # This should not pull in installer strings. This is will bloat the binary
+  # for no reason and is easy to mess up. See the comment at the top of
+  # //chrome/installer/util/BUILD.gn.
+  assert_no_deps = [ "//chrome/installer/util:strings" ]
+}
+
+if (!is_android && !is_mac) {
+  #group("chrome") {
+  group("gooroom-browser") {
+    public_deps = [
+      #":chrome_initial",
+      ":gooroom_initial",
+    ]
+    data_deps = [
+      #":chrome_initial",
+      ":gooroom_initial",
+    ]
+    if (is_win) {
+      public_deps += [ ":reorder_imports" ]
+    }
+    if (is_chromeos) {
+      data_deps += [ "//sandbox/linux:chrome_sandbox" ]
+    }
+  }
+
+  #template("chrome_binary") {
+  template("gooroom_binary") {
+    executable(target_name) {
+      output_name = invoker.output_name
+      sources = invoker.sources
+      if (defined(invoker.deps)) {
+        deps = invoker.deps
+      } else {
+        deps = []
+      }
+      if (defined(invoker.data)) {
+        data = invoker.data
+      } else {
+        data = []
+      }
+
+      # Because the sources list varies so significantly per-platform, generally
+      # each platform lists its own files rather than relying on filtering or
+      # removing unused files.
+      sources += [ "app/chrome_exe_resource.h" ]
+      defines = []
+      public_deps = []
+
+      data += [ "$root_out_dir/resources.pak" ]
+      if (is_linux || is_win) {
+        data += [
+          "$root_out_dir/chrome_100_percent.pak",
+          "$root_out_dir/locales/en-US.pak",
+          "$root_out_dir/locales/fr.pak",
+        ]
+      }
+
+      data_deps = []
+
+      if (is_linux) {
+        sources += [
+          #"app/chrome_dll_resource.h",
+          #"app/chrome_main.cc",
+          #"app/chrome_main_delegate.cc",
+          #"app/chrome_main_delegate.h",
+          "//chrome/app/chrome_dll_resource.h",
+          "//chrome/app/chrome_main.cc",
+          "//chrome/app/chrome_main_delegate.cc",
+          "//chrome/app/chrome_main_delegate.h",
+          
+          # Gooroom source code
+          "app/gooroom_exe_main_aura.cc",
+          "app/gooroom_main.cc",
+          "app/gooroom_main_delegate.h",
+          "app/gooroom_main_delegate.cc",
+        ]
+
+        deps += [
+          # On Linux, link the dependencies (libraries) that make up actual
+          # Chromium functionality directly into the executable.
+          #"//chrome:browser_dependencies",
+          #"//chrome:child_dependencies",
+          "//chrome:browser_dependencies",
+          "//chrome:child_dependencies",
+
+          # For the sampling profiler.
+          "//chrome/common/profiler",
+
+          # Needed to use the master_preferences functions
+          "//chrome/installer/util:with_no_strings",
+
+          # For headless mode.
+          "//headless:headless_shell_lib",
+
+          # For Gooroom build
+          "//gooroom/browser:gooroom_browser",
+        ]
+
+        public_deps = [
+          #":xdg_mime",  # Needs to be public for installer to consume files.
+          "//chrome:xdg_mime",  # Needs to be public for installer to consume files.
+          "//chrome/common:buildflags",
+        ]
+
+        ldflags = []
+
+        # Chrome OS debug builds for arm need to pass --long-plt to the linker.
+        # See https://bugs.chromium.org/p/chromium/issues/detail?id=583532
+        if (is_chromeos && is_debug && target_cpu == "arm") {
+          ldflags += [ "-Wl,--long-plt" ]
+        }
+
+        if (!is_component_build && !using_sanitizer) {
+          version_script = "//build/linux/chrome.map"
+          inputs = [
+            version_script,
+          ]
+          ldflags += [ "-Wl,--version-script=" +
+                       rebase_path(version_script, root_build_dir) ]
+        }
+      }
+
+      # These files are used by the installer so we need a public dep.
+      #public_deps += [ "packed_resources" ]
+      public_deps += [ "//chrome:packed_resources" ]
+
+      # Only ChromeOS has precompiled Flash that needs to get copied to the output
+      # directory. On other platforms, Flash is either component-updated only or
+      # not supported at all.
+      if (is_chromeos) {
+        deps += [ "//third_party/adobe/flash:flapper_binaries" ]
+      }
+
+      data_deps += [
+        "//chrome/browser/resources/media/mei_preload:component",
+      ]
+    }
+  }
+
+  #chrome_binary("chrome_initial") {
+  gooroom_binary("gooroom_initial") {
+    if (is_win) {
+      #output_name = "initialexe/chrome"
+      output_name = "initialexe/gooroom-browser"
+    } else {
+      #output_name = "chrome"
+      output_name = "gooroom-browser"
+    }
+
+    sources = []
+    if (!is_win && use_aura) {
+      # Non-Windows aura entrypoint.
+      sources += [ #"//chrome/app/chrome_exe_main_aura.cc" ]
+
+        # Gooroom source code
+        
+        # for commit #1, glue commit #3, #5
+        "browser/gooroom_content_browser_client.cc",
+        "browser/gooroom_content_browser_client.h",
+        "browser/gooroom_content_client.cc",
+        "browser/gooroom_content_client.h",
+      ]
+    }
+  }
+}  # !is_android && !is_mac
+
+group("browser_dependencies") {
+  public_deps = [
+    "//chrome/browser",
+    "//chrome/common",
+    "//components/sync",
+  ]
+  if (enable_plugins) {
+    public_deps += [ "//ppapi/host" ]
+  }
+
+  if (enable_basic_printing || enable_print_preview) {
+    public_deps += [ "//printing" ]
+    if (enable_print_preview && !is_chromeos) {
+      public_deps += [ "//chrome/service" ]
+    }
+  }
+
+  if (!is_component_build) {
+    assert_no_deps = [
+      # Blink should not be used in the browser process. In component build this
+      # is OK because all of content is linked into one library. Note that the
+      # blink_headers target is OK, so we can't do a wildcard for all blink
+      # targets.
+      "//third_party/WebKit/public:blink",
+    ]
+
+    if (is_win) {
+      assert_no_deps += [
+        # V8/Gin should not be used in the browser DLL on Windows.
+        "//gin",
+        "//tools/v8_context_snapshot",
+        "//v8",
+      ]
+    }
+  }
+}
+
+group("resources") {
+  public_deps = [
+    "//chrome/browser:resources",
+    "//chrome/common:resources",
+    "//chrome/renderer:resources",
+  ]
+}
+
+group("extra_resources") {
+  # Deps should be same as those in chrome_extra_paks() within chrome_paks.gni.
+  public_deps = [
+    "//chrome/browser/resources:resources",
+    "//components/autofill/core/browser:autofill_address_rewriter_resources",
+  ]
+
+  if (is_chromeos_ash && !enable_use_media_app_ink) {
+    # TODO(crbug/1150244): Remove when enable_use_media_app_ink is default true.
+    public_deps += [ "//third_party/ink:ink_resources" ]
+  }
+}
+
+if (is_chrome_branded && !is_android) {
+  if (!is_mac) {
+    _default_apps_target_type = "copy"
+  } else {
+    _default_apps_target_type = "bundle_data"
+  }
+
+  target(_default_apps_target_type, "default_apps") {
+    visibility = [ ":packed_resources" ]
+    if (is_mac) {
+      visibility += [
+        ":chrome_framework",
+        ":chrome_framework_shared_library",
+      ]
+    }
+
+    sources = [
+      "browser/resources/default_apps/docs.crx",
+      "browser/resources/default_apps/drive.crx",
+      "browser/resources/default_apps/external_extensions.json",
+      "browser/resources/default_apps/gmail.crx",
+      "browser/resources/default_apps/youtube.crx",
+    ]
+
+    if (!is_mac) {
+      outputs = [
+        "$root_out_dir/default_apps/{{source_file_part}}",
+      ]
+    } else {
+      outputs = [
+        "{{bundle_contents_dir}}/Default Apps/{{source_file_part}}",
+      ]
+    }
+
+    # Force anybody that depends on this to get the default apps as data files.
+    data = process_file_template(sources, outputs)
+  }
+}
+
+group("strings") {
+  public_deps = [
+    "//chrome/app:chromium_strings",
+    "//chrome/app:generated_resources",
+    "//chrome/app:google_chrome_strings",
+    "//chrome/app/resources:locale_settings",
+  ]
+}
+
+if (enable_resource_allowlist_generation) {
+  generate_resource_allowlist("resource_allowlist") {
+    deps = [
+      "//chrome/android:libchrome",
+    ]
+    input = "$root_out_dir/libchrome$shlib_extension.allowlist"
+    output = chrome_resource_allowlist
+  }
+}
+
+if (is_linux) {
+  if (is_official_build) {
+    action("linux_symbols") {
+      script = "//build/linux/dump_app_syms.py"
+
+      dump_syms_label = "//third_party/breakpad:dump_syms($host_toolchain)"
+      dump_syms_binary =
+          get_label_info(dump_syms_label, "root_out_dir") + "/" + "dump_syms"
+
+      chrome_binary = "$root_out_dir/chrome"
+      if (current_cpu == "x86") {
+        # GYP used "ia32" so keep that naming for back-compat.
+        symbol_file = "$root_out_dir/chrome.breakpad.ia32"
+      } else {
+        symbol_file = "$root_out_dir/chrome.breakpad.$current_cpu"
+      }
+
+      inputs = [
+        chrome_binary,
+        dump_syms_binary,
+      ]
+      outputs = [
+        symbol_file,
+      ]
+
+      args = [
+        "./" + rebase_path(dump_syms_binary, root_build_dir),
+        "0",  # strip_binary = false
+        rebase_path(chrome_binary, root_build_dir),
+        rebase_path(symbol_file, root_build_dir),
+      ]
+
+      deps = [
+        ":chrome",
+        dump_syms_label,
+      ]
+    }
+  }
+}
diff --git a/gooroom/app/gooroom_exe_main_aura.cc b/gooroom/app/gooroom_exe_main_aura.cc
new file mode 100644
index 000000000..50053010c
--- /dev/null
+++ b/gooroom/app/gooroom_exe_main_aura.cc
@@ -0,0 +1,22 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <stdlib.h>
+#include <string.h>
+
+#include "build/build_config.h"
+#include "base/syslog_logging.h"
+
+// The entry point for all invocations of Chromium, browser and renderer. On
+// windows, this does nothing but load chrome.dll and invoke its entry point in
+// order to make it easy to update the app from GoogleUpdate. We don't need
+// that extra layer with on linux.
+
+extern "C" {
+int GooroomMain(int argc, const char** argv);
+}
+
+int main(int argc, const char** argv) {
+  return GooroomMain(argc, argv);
+}
diff --git a/gooroom/app/gooroom_main.cc b/gooroom/app/gooroom_main.cc
new file mode 100644
index 000000000..4922c63a1
--- /dev/null
+++ b/gooroom/app/gooroom_main.cc
@@ -0,0 +1,115 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <stdint.h>
+
+#include "gooroom_main_delegate.h"
+
+#include "base/command_line.h"
+#include "base/time/time.h"
+#include "build/build_config.h"
+#include "chrome/app/chrome_main_delegate.h"
+#include "chrome/common/chrome_switches.h"
+#include "chrome/common/profiler/main_thread_stack_sampling_profiler.h"
+#include "chrome/common/buildflags.h"
+#include "content/public/common/content_switches.h"
+#include "headless/public/headless_shell.h"
+#include "ui/gfx/switches.h"
+
+#if defined(OS_MACOSX)
+#include "chrome/app/chrome_main_mac.h"
+#endif
+
+#if defined(OS_WIN)
+#include "base/debug/dump_without_crashing.h"
+#include "base/win/win_util.h"
+#include "chrome/common/chrome_constants.h"
+#include "chrome/install_static/initialize_from_primary_module.h"
+#include "chrome/install_static/install_details.h"
+
+#define DLLEXPORT __declspec(dllexport)
+
+// We use extern C for the prototype DLLEXPORT to avoid C++ name mangling.
+extern "C" {
+DLLEXPORT int __cdecl GooroomMain(HINSTANCE instance,
+                                  sandbox::SandboxInterfaceInfo* sandbox_info,
+                                  int64_t exe_entry_point_ticks);
+}
+#elif defined(OS_POSIX)
+extern "C" {
+__attribute__((visibility("default"))) int GooroomMain(int argc,
+                                                       const char** argv);
+}
+#endif
+
+#if defined(OS_WIN)
+DLLEXPORT int __cdecl GooroomMain(HINSTANCE instance,
+                                  sandbox::SandboxInterfaceInfo* sandbox_info,
+                                  int64_t exe_entry_point_ticks) {
+#elif defined(OS_POSIX)
+int GooroomMain(int argc, const char** argv) {
+  int64_t exe_entry_point_ticks = 0;
+#endif
+
+#if defined(OS_WIN)
+  install_static::InitializeFromPrimaryModule();
+#endif
+
+  GooroomMainDelegate gooroom_main_delegate(
+      base::TimeTicks::FromInternalValue(exe_entry_point_ticks));
+//  ChromeMainDelegate chrome_main_delegate(
+//      base::TimeTicks::FromInternalValue(exe_entry_point_ticks));
+
+  content::ContentMainParams params(&gooroom_main_delegate);
+
+#if defined(OS_WIN)
+  // The process should crash when going through abnormal termination.
+  base::win::SetShouldCrashOnProcessDetach(true);
+  base::win::SetAbortBehaviorForCrashReporting();
+  params.instance = instance;
+  params.sandbox_info = sandbox_info;
+
+  // SetDumpWithoutCrashingFunction must be passed the DumpProcess function
+  // from chrome_elf and not from the DLL in order for DumpWithoutCrashing to
+  // function correctly.
+  typedef void(__cdecl * DumpProcessFunction)();
+  DumpProcessFunction DumpProcess = reinterpret_cast<DumpProcessFunction>(
+      ::GetProcAddress(::GetModuleHandle(chrome::kChromeElfDllName),
+                       "DumpProcessWithoutCrash"));
+  CHECK(DumpProcess);
+  base::debug::SetDumpWithoutCrashingFunction(DumpProcess);
+
+  // Verify that chrome_elf and this module (chrome.dll and chrome_child.dll)
+  // have the same version.
+  if (install_static::InstallDetails::Get().VersionMismatch())
+    base::debug::DumpWithoutCrashing();
+#else
+  params.argc = argc;
+  params.argv = argv;
+  base::CommandLine::Init(params.argc, params.argv);
+#endif  // defined(OS_WIN)
+  base::CommandLine::Init(0, nullptr);
+  const base::CommandLine* command_line(base::CommandLine::ForCurrentProcess());
+  ALLOW_UNUSED_LOCAL(command_line);
+#if defined(OS_MACOSX)
+  SetUpBundleOverrides();
+#endif
+
+  // Start the sampling profiler as early as possible - namely, once the command
+  // line data is available. Allocated as an object on the stack to ensure that
+  // the destructor runs on shutdown, which is important to avoid the profiler
+  // thread's destruction racing with main thread destruction.
+  MainThreadStackSamplingProfiler scoped_sampling_profiler;
+
+  // Chrome-specific process modes.
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+  if (command_line->HasSwitch(switches::kHeadless)) {
+    return headless::HeadlessShellMain(params);
+  }
+#endif  // defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
+
+  int rv = content::ContentMain(params);
+
+  return rv;
+}
diff --git a/gooroom/app/gooroom_main_delegate.cc b/gooroom/app/gooroom_main_delegate.cc
new file mode 100644
index 000000000..683b83c46
--- /dev/null
+++ b/gooroom/app/gooroom_main_delegate.cc
@@ -0,0 +1,86 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "gooroom/app/gooroom_main_delegate.h"
+#include "base/lazy_instance.h"
+#include "base/logging.h"
+#include "gooroom/browser/gooroom_content_browser_client.h"
+#include "chrome/browser/chrome_resource_bundle_helper.h"
+#include "chrome/common/chrome_features.h"
+#include "net/url_request/url_request.h"
+
+#include "chrome/browser/metrics/chrome_feature_list_creator.h"
+#include "chrome/browser/startup_data.h"
+#include "components/startup_metric_utils/browser/startup_metric_utils.h"
+
+
+#include <stddef.h>
+#include <iostream>
+#include <istream>
+#include <ostream>
+#include <string>
+#include <locale.h>
+
+
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+base::LazyInstance<GooroomContentBrowserClient>::DestructorAtExit
+    g_gooroom_content_browser_client = LAZY_INSTANCE_INITIALIZER;
+#endif
+
+GooroomMainDelegate::GooroomMainDelegate()
+    : GooroomMainDelegate(base::TimeTicks()) {}
+
+GooroomMainDelegate::GooroomMainDelegate(base::TimeTicks exe_entry_point_ticks)
+    : ChromeMainDelegate(exe_entry_point_ticks) {}
+
+GooroomMainDelegate::~GooroomMainDelegate() = default;
+
+void GooroomMainDelegate::PreSandboxStartup() {
+  ChromeMainDelegate::PreSandboxStartup();
+}
+
+bool GooroomMainDelegate::BasicStartupComplete(int* exit_code) {
+  bool result = ChromeMainDelegate::BasicStartupComplete(exit_code);
+
+  if (!result) {
+    content::SetContentClient(&gooroom_content_client_);
+    DLOG(INFO) << "BasicStartupComplete() this = " << this;
+  }
+
+  return result;
+}
+
+void GooroomMainDelegate::PostEarlyInitialization(bool is_running_tests) {
+  // Chrome disallows cookies by default. All code paths that want to use
+  // cookies need to go through one of Chrome's URLRequestContexts which have
+  // a ChromeNetworkDelegate attached that selectively allows cookies again.
+  net::URLRequest::SetDefaultCookiePolicyToBlock();
+
+  DCHECK(startup_data_);
+  ChromeFeatureListCreator* chrome_feature_list_creator =
+      chrome_content_browser_client_->startup_data()
+          ->chrome_feature_list_creator();
+  chrome_feature_list_creator->CreateFeatureList();
+  PostFieldTrialInitialization();
+
+  // Initializes the resource bundle and determines the locale.
+  std::string actual_locale =
+      LoadLocalState(chrome_feature_list_creator, is_running_tests);
+  chrome_feature_list_creator->SetApplicationLocale(actual_locale);
+  chrome_feature_list_creator->OverrideCachedUIStrings();
+
+  if (base::FeatureList::IsEnabled(
+          features::kWriteBasicSystemProfileToPersistentHistogramsFile)) {
+    bool record = true;
+    if (record)
+      chrome_content_browser_client_->startup_data()->RecordCoreSystemProfile();
+  }
+}
+
+content::ContentBrowserClient*
+GooroomMainDelegate::CreateContentBrowserClient() {
+  chrome_content_browser_client_ =
+      std::make_unique<GooroomContentBrowserClient>();
+  return chrome_content_browser_client_.get();
+}
diff --git a/gooroom/app/gooroom_main_delegate.h b/gooroom/app/gooroom_main_delegate.h
new file mode 100644
index 000000000..5d2797d67
--- /dev/null
+++ b/gooroom/app/gooroom_main_delegate.h
@@ -0,0 +1,51 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef GOOROOM_APP_GOOROOM_MAIN_DELEGATE_H_
+#define GOOROOM_APP_GOOROOM_MAIN_DELEGATE_H_
+
+#include <iostream>
+#include <istream>
+#include <ostream>
+
+#include "base/logging.h"
+
+#include "base/time/time.h"
+#include "chrome/app/chrome_main_delegate.h"
+#include "content/public/app/content_main_delegate.h"
+#include "gooroom/browser/gooroom_content_client.h"
+
+namespace base {
+class CommandLine;
+}
+
+// Chrome implementation of ContentMainDelegate.
+class GooroomMainDelegate : public ChromeMainDelegate {
+ public:
+  GooroomMainDelegate();
+  explicit GooroomMainDelegate(base::TimeTicks exe_entry_point_ticks);
+
+  ~GooroomMainDelegate() override;
+
+ protected:
+  void PostEarlyInitialization(bool is_running_tests) override;
+
+  void PreSandboxStartup() override;
+
+  bool BasicStartupComplete(int* exit_code) override;
+
+  content::ContentBrowserClient* CreateContentBrowserClient() override;
+
+
+  GooroomContentClient gooroom_content_client_;
+
+#if !defined(CHROME_MULTIPLE_DLL_CHILD)
+  std::unique_ptr<StartupData> startup_data_;
+#endif
+
+
+  DISALLOW_COPY_AND_ASSIGN(GooroomMainDelegate);
+};
+
+#endif  // CHROME_APP_CHROME_MAIN_DELEGATE_H_
diff --git a/gooroom/browser/BUILD.gn b/gooroom/browser/BUILD.gn
new file mode 100644
index 000000000..4a87b0352
--- /dev/null
+++ b/gooroom/browser/BUILD.gn
@@ -0,0 +1,20 @@
+# Copyright 2014 The Chromium Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style license that can be
+# found in the LICENSE file.
+
+import("//chrome/chrome_paks.gni")
+import("//build/util/branding.gni")
+
+static_library("gooroom_browser") {
+  sources = [
+    "gooroom_content_browser_client.h",
+    "gooroom_content_browser_client.cc",
+    "gooroom_content_client.cc",
+    "gooroom_content_client.h",
+
+  ]
+
+  deps = [
+    "//chrome/browser:browser",
+  ]
+}
diff --git a/gooroom/browser/gooroom_content_browser_client.cc b/gooroom/browser/gooroom_content_browser_client.cc
new file mode 100644
index 000000000..52776071c
--- /dev/null
+++ b/gooroom/browser/gooroom_content_browser_client.cc
@@ -0,0 +1,766 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "gooroom/browser/gooroom_content_browser_client.h"
+
+#include <iterator>
+#include <map>
+#include <set>
+#include <utility>
+#include <vector>
+
+#include "base/base_switches.h"
+#include "base/bind.h"
+#include "base/callback_helpers.h"
+#include "base/command_line.h"
+#include "base/compiler_specific.h"
+#include "base/containers/contains.h"
+#include "base/files/file_util.h"
+#include "base/files/scoped_file.h"
+#include "base/i18n/base_i18n_switches.h"
+#include "base/i18n/character_encoding.h"
+#include "base/macros.h"
+#include "base/metrics/field_trial_params.h"
+#include "base/metrics/histogram_macros.h"
+#include "base/no_destructor.h"
+#include "base/path_service.h"
+#include "base/sequenced_task_runner.h"
+#include "base/strings/strcat.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_split.h"
+#include "base/strings/string_util.h"
+#include "base/strings/stringprintf.h"
+#include "base/strings/utf_string_conversions.h"
+#include "base/system/sys_info.h"
+#include "base/threading/sequenced_task_runner_handle.h"
+#include "base/threading/thread_task_runner_handle.h"
+#include "build/build_config.h"
+#include "build/chromeos_buildflags.h"
+#include "chrome/browser/accessibility/accessibility_labels_service.h"
+#include "chrome/browser/accessibility/accessibility_labels_service_factory.h"
+#include "chrome/browser/accessibility/caption_util.h"
+#include "chrome/browser/after_startup_task_utils.h"
+#include "chrome/browser/bluetooth/chrome_bluetooth_delegate.h"
+#include "chrome/browser/browser_about_handler.h"
+#include "chrome/browser/browser_features.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.h"
+#include "chrome/browser/captive_portal/captive_portal_service_factory.h"
+#include "chrome/browser/chrome_content_browser_client_binder_policies.h"
+#include "chrome/browser/chrome_content_browser_client_parts.h"
+#include "chrome/browser/content_settings/cookie_settings_factory.h"
+#include "chrome/browser/content_settings/host_content_settings_map_factory.h"
+#include "chrome/browser/custom_handlers/protocol_handler_registry.h"
+#include "chrome/browser/custom_handlers/protocol_handler_registry_factory.h"
+#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.h"
+#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings_factory.h"
+#include "chrome/browser/data_use_measurement/chrome_data_use_measurement.h"
+#include "chrome/browser/defaults.h"
+#include "chrome/browser/device_api/device_service_impl.h"
+#include "chrome/browser/download/chrome_download_manager_delegate.h"
+#include "chrome/browser/download/download_prefs.h"
+#include "chrome/browser/enterprise/connectors/connectors_service.h"
+#include "chrome/browser/extensions/chrome_extension_cookies.h"
+#include "chrome/browser/external_protocol/external_protocol_handler.h"
+#include "chrome/browser/federated_learning/floc_eligibility_observer.h"
+#include "chrome/browser/federated_learning/floc_id_provider.h"
+#include "chrome/browser/federated_learning/floc_id_provider_factory.h"
+#include "chrome/browser/font_access/chrome_font_access_delegate.h"
+#include "chrome/browser/font_family_cache.h"
+#include "chrome/browser/gpu/chrome_browser_main_extra_parts_gpu.h"
+#include "chrome/browser/hid/chrome_hid_delegate.h"
+#include "chrome/browser/interstitials/enterprise_util.h"
+#include "chrome/browser/lifetime/browser_shutdown.h"
+#include "chrome/browser/lookalikes/lookalike_url_navigation_throttle.h"
+#include "chrome/browser/media/audio_service_util.h"
+#include "chrome/browser/media/router/media_router_feature.h"
+#include "chrome/browser/media/webrtc/audio_debug_recordings_handler.h"
+#include "chrome/browser/media/webrtc/media_capture_devices_dispatcher.h"
+#include "chrome/browser/media/webrtc/webrtc_logging_controller.h"
+#include "chrome/browser/memory/chrome_browser_main_extra_parts_memory.h"
+#include "chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.h"
+#include "chrome/browser/metrics/chrome_feature_list_creator.h"
+#include "chrome/browser/nacl_host/nacl_browser_delegate_impl.h"
+#include "chrome/browser/net/chrome_network_delegate.h"
+#include "chrome/browser/net/profile_network_context_service.h"
+#include "chrome/browser/net/profile_network_context_service_factory.h"
+#include "chrome/browser/net/system_network_context_manager.h"
+#include "chrome/browser/notifications/platform_notification_service_factory.h"
+#include "chrome/browser/notifications/platform_notification_service_impl.h"
+#include "chrome/browser/password_manager/chrome_password_manager_client.h"
+#include "chrome/browser/payments/payment_request_display_manager_factory.h"
+#include "chrome/browser/performance_manager/chrome_browser_main_extra_parts_performance_manager.h"
+#include "chrome/browser/performance_manager/chrome_content_browser_client_performance_manager_part.h"
+#include "chrome/browser/permissions/attestation_permission_request.h"
+#include "chrome/browser/platform_util.h"
+#include "chrome/browser/plugins/pdf_iframe_navigation_throttle.h"
+#include "chrome/browser/plugins/plugin_utils.h"
+#include "chrome/browser/policy/profile_policy_connector.h"
+#include "chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_features.h"
+#include "chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_service.h"
+#include "chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_service_factory.h"
+#include "chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_url_loader_interceptor.h"
+#include "chrome/browser/prefetch/search_prefetch/field_trial_settings.h"
+#include "chrome/browser/prefetch/search_prefetch/search_prefetch_service.h"
+#include "chrome/browser/prefetch/search_prefetch/search_prefetch_service_factory.h"
+#include "chrome/browser/prefetch/search_prefetch/search_prefetch_url_loader.h"
+#include "chrome/browser/prefetch/search_prefetch/search_prefetch_url_loader_interceptor.h"
+#include "chrome/browser/previews/previews_content_util.h"
+#include "chrome/browser/previews/previews_service.h"
+#include "chrome/browser/previews/previews_service_factory.h"
+#include "chrome/browser/previews/previews_ui_tab_helper.h"
+#include "chrome/browser/privacy_sandbox/privacy_sandbox_settings.h"
+#include "chrome/browser/privacy_sandbox/privacy_sandbox_settings_factory.h"
+#include "chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/profiles/profile_io_data.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "chrome/browser/profiles/renderer_updater.h"
+#include "chrome/browser/profiles/renderer_updater_factory.h"
+#include "chrome/browser/profiling_host/chrome_browser_main_extra_parts_profiling.h"
+#include "chrome/browser/profiling_host/profiling_process_host.h"
+#include "chrome/browser/renderer_host/chrome_navigation_ui_data.h"
+#include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
+#include "chrome/browser/renderer_preferences_util.h"
+#include "chrome/browser/resource_coordinator/background_tab_navigation_throttle.h"
+#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
+#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
+#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
+#include "chrome/browser/safe_browsing/delayed_warning_navigation_throttle.h"
+#include "chrome/browser/safe_browsing/safe_browsing_navigation_throttle.h"
+#include "chrome/browser/safe_browsing/safe_browsing_service.h"
+#include "chrome/browser/safe_browsing/ui_manager.h"
+#include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
+#include "chrome/browser/safe_browsing/url_lookup_service_factory.h"
+#include "chrome/browser/search/search.h"
+#include "chrome/browser/sharing/sms/sms_remote_fetcher.h"
+#include "chrome/browser/signin/chrome_signin_proxying_url_loader_factory.h"
+#include "chrome/browser/signin/chrome_signin_url_loader_throttle.h"
+#include "chrome/browser/signin/header_modification_delegate_impl.h"
+#include "chrome/browser/signin/identity_manager_factory.h"
+#include "chrome/browser/speech/chrome_speech_recognition_manager_delegate.h"
+#include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
+#include "chrome/browser/ssl/sct_reporting_service.h"
+#include "chrome/browser/ssl/sct_reporting_service_factory.h"
+#include "chrome/browser/ssl/ssl_client_auth_metrics.h"
+#include "chrome/browser/ssl/ssl_client_certificate_selector.h"
+#include "chrome/browser/ssl/typed_navigation_upgrade_throttle.h"
+#include "chrome/browser/sync_file_system/local/sync_file_system_backend.h"
+#include "chrome/browser/tab_contents/tab_util.h"
+#include "chrome/browser/tracing/chrome_tracing_delegate.h"
+#include "chrome/browser/translate/translate_service.h"
+#include "chrome/browser/ui/blocked_content/blocked_window_params.h"
+#include "chrome/browser/ui/blocked_content/chrome_popup_navigation_delegate.h"
+#include "chrome/browser/ui/blocked_content/tab_under_navigation_throttle.h"
+#include "chrome/browser/ui/browser_navigator.h"
+#include "chrome/browser/ui/browser_navigator_params.h"
+#include "chrome/browser/ui/chrome_select_file_policy.h"
+#include "chrome/browser/ui/login/login_handler.h"
+#include "chrome/browser/ui/login/login_navigation_throttle.h"
+#include "chrome/browser/ui/login/login_tab_helper.h"
+#include "chrome/browser/ui/passwords/well_known_change_password_navigation_throttle.h"
+#include "chrome/browser/ui/prefs/pref_watcher.h"
+#include "chrome/browser/ui/sync/sync_promo_ui.h"
+#include "chrome/browser/ui/tab_contents/chrome_web_contents_view_delegate.h"
+#include "chrome/browser/ui/ui_features.h"
+#include "chrome/browser/ui/webid/identity_dialog_controller.h"
+#include "chrome/browser/ui/webui/chrome_web_ui_controller_factory.h"
+#include "chrome/browser/ui/webui/log_web_ui_url.h"
+#include "chrome/browser/usb/frame_usb_services.h"
+#include "chrome/browser/vr/vr_tab_helper.h"
+#include "chrome/browser/web_applications/components/app_registrar.h"
+#include "chrome/browser/web_applications/components/web_app_provider_base.h"
+#include "chrome/common/buildflags.h"
+#include "chrome/common/channel_info.h"
+#include "chrome/common/chrome_constants.h"
+#include "chrome/common/chrome_content_client.h"
+#include "chrome/common/chrome_features.h"
+#include "chrome/common/chrome_paths.h"
+#include "chrome/common/chrome_paths_internal.h"
+#include "chrome/common/chrome_switches.h"
+#include "chrome/common/env_vars.h"
+#include "chrome/common/google_url_loader_throttle.h"
+#include "chrome/common/logging_chrome.h"
+#include "chrome/common/pepper_permission_util.h"
+#include "chrome/common/pref_names.h"
+#include "chrome/common/profiler/thread_profiler_configuration.h"
+#include "chrome/common/renderer_configuration.mojom.h"
+#include "chrome/common/secure_origin_allowlist.h"
+#include "chrome/common/url_constants.h"
+#include "chrome/common/webui_url_constants.h"
+#include "chrome/grit/browser_resources.h"
+#include "chrome/grit/generated_resources.h"
+#include "chrome/installer/util/google_update_settings.h"
+#include "components/autofill/core/common/autofill_switches.h"
+#include "components/blocked_content/popup_blocker.h"
+#include "components/browsing_data/content/browsing_data_helper.h"
+#include "components/browsing_data/core/browsing_data_utils.h"
+#include "components/captive_portal/content/captive_portal_service.h"
+#include "components/captive_portal/core/buildflags.h"
+#include "components/cdm/browser/cdm_message_filter_android.h"
+#include "components/certificate_matching/certificate_principal_pattern.h"
+#include "components/cloud_devices/common/cloud_devices_switches.h"
+#include "components/content_settings/browser/page_specific_content_settings.h"
+#include "components/content_settings/core/browser/content_settings_utils.h"
+#include "components/content_settings/core/browser/cookie_settings.h"
+#include "components/content_settings/core/browser/host_content_settings_map.h"
+#include "components/content_settings/core/browser/private_network_settings.h"
+#include "components/content_settings/core/common/content_settings.h"
+#include "components/content_settings/core/common/content_settings_types.h"
+#include "components/content_settings/core/common/content_settings_utils.h"
+#include "components/content_settings/core/common/pref_names.h"
+#include "components/data_reduction_proxy/core/browser/data_reduction_proxy_data.h"
+#include "components/data_reduction_proxy/core/browser/data_reduction_proxy_service.h"
+#include "components/data_reduction_proxy/core/common/data_reduction_proxy_features.h"
+#include "components/data_reduction_proxy/core/common/data_reduction_proxy_params.h"
+#include "components/dom_distiller/core/dom_distiller_switches.h"
+#include "components/dom_distiller/core/url_constants.h"
+#include "components/embedder_support/switches.h"
+#include "components/error_page/common/error.h"
+#include "components/error_page/common/error_page_switches.h"
+#include "components/error_page/common/localized_error.h"
+#include "components/error_page/content/browser/net_error_auto_reloader.h"
+#include "components/feature_engagement/public/feature_constants.h"
+#include "components/feature_engagement/public/feature_list.h"
+#include "components/google/core/common/google_switches.h"
+#include "components/keep_alive_registry/keep_alive_types.h"
+#include "components/keep_alive_registry/scoped_keep_alive.h"
+#include "components/language/core/browser/pref_names.h"
+#include "components/media_router/browser/presentation/presentation_service_delegate_impl.h"
+#include "components/media_router/browser/presentation/receiver_presentation_service_delegate_impl.h"
+#include "components/metrics/client_info.h"
+#include "components/metrics_services_manager/metrics_services_manager.h"
+#include "components/net_log/chrome_net_log.h"
+#include "components/no_state_prefetch/common/prerender_final_status.h"
+#include "components/no_state_prefetch/common/prerender_url_loader_throttle.h"
+#include "components/no_state_prefetch/common/prerender_util.h"
+#include "components/omnibox/common/omnibox_features.h"
+#include "components/page_load_metrics/browser/metrics_navigation_throttle.h"
+#include "components/page_load_metrics/browser/metrics_web_contents_observer.h"
+#include "components/payments/content/payment_handler_navigation_throttle.h"
+#include "components/payments/content/payment_request_display_manager.h"
+#include "components/performance_manager/embedder/performance_manager_registry.h"
+#include "components/permissions/permission_context_base.h"
+#include "components/permissions/quota_permission_context_impl.h"
+#include "components/policy/content/policy_blocklist_navigation_throttle.h"
+#include "components/policy/content/policy_blocklist_service.h"
+#include "components/policy/core/common/policy_pref_names.h"
+#include "components/policy/core/common/policy_service.h"
+#include "components/policy/policy_constants.h"
+#include "components/pref_registry/pref_registry_syncable.h"
+#include "components/prefs/pref_registry_simple.h"
+#include "components/prefs/pref_service.h"
+#include "components/prefs/scoped_user_pref_update.h"
+#include "components/previews/content/previews_decider.h"
+#include "components/previews/content/previews_decider_impl.h"
+#include "components/previews/content/previews_ui_service.h"
+#include "components/previews/content/previews_user_data.h"
+#include "components/previews/core/previews_experiments.h"
+#include "components/previews/core/previews_features.h"
+#include "components/previews/core/previews_switches.h"
+#include "components/safe_browsing/buildflags.h"
+#include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
+#include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
+#include "components/safe_browsing/core/browser/url_checker_delegate.h"
+#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
+#include "components/safe_browsing/core/db/database_manager.h"
+#include "components/safe_browsing/core/features.h"
+#include "components/safe_browsing/core/realtime/policy_engine.h"
+#include "components/safe_browsing/core/realtime/url_lookup_service.h"
+#include "components/security_interstitials/content/insecure_form_navigation_throttle.h"
+#include "components/security_interstitials/content/origin_policy_ui.h"
+#include "components/security_interstitials/content/ssl_cert_reporter.h"
+#include "components/security_interstitials/content/ssl_error_handler.h"
+#include "components/security_interstitials/content/ssl_error_navigation_throttle.h"
+#include "components/signin/public/identity_manager/identity_manager.h"
+#include "components/site_engagement/content/site_engagement_service.h"
+#include "components/site_isolation/pref_names.h"
+#include "components/site_isolation/preloaded_isolated_origins.h"
+#include "components/site_isolation/site_isolation_policy.h"
+#include "components/translate/core/common/translate_switches.h"
+#include "components/ukm/content/source_url_recorder.h"
+#include "components/url_formatter/url_fixer.h"
+#include "components/variations/variations_associated_data.h"
+#include "components/variations/variations_ids_provider.h"
+#include "components/variations/variations_switches.h"
+#include "components/version_info/version_info.h"
+#include "components/viz/common/features.h"
+#include "components/viz/common/viz_utils.h"
+#include "content/public/browser/browser_child_process_host.h"
+#include "content/public/browser/browser_main_parts.h"
+#include "content/public/browser/browser_ppapi_host.h"
+#include "content/public/browser/browser_task_traits.h"
+#include "content/public/browser/browser_thread.h"
+#include "content/public/browser/browser_url_handler.h"
+#include "content/public/browser/browsing_data_remover.h"
+#include "content/public/browser/certificate_request_result_type.h"
+#include "content/public/browser/child_process_data.h"
+#include "content/public/browser/child_process_security_policy.h"
+#include "content/public/browser/client_certificate_delegate.h"
+#include "content/public/browser/file_url_loader.h"
+#include "content/public/browser/font_access_delegate.h"
+#include "content/public/browser/gpu_data_manager.h"
+#include "content/public/browser/navigation_handle.h"
+#include "content/public/browser/navigation_throttle.h"
+#include "content/public/browser/overlay_window.h"
+#include "content/public/browser/permission_controller.h"
+#include "content/public/browser/render_frame_host.h"
+#include "content/public/browser/render_process_host.h"
+#include "content/public/browser/render_view_host.h"
+#include "content/public/browser/resource_context.h"
+#include "content/public/browser/site_isolation_policy.h"
+#include "content/public/browser/storage_partition.h"
+#include "content/public/browser/tts_controller.h"
+#include "content/public/browser/tts_platform.h"
+#include "content/public/browser/url_loader_request_interceptor.h"
+#include "content/public/browser/vpn_service_proxy.h"
+#include "content/public/browser/web_contents.h"
+#include "content/public/browser/web_contents_delegate.h"
+#include "content/public/browser/web_ui_url_loader_factory.h"
+#include "content/public/common/bindings_policy.h"
+#include "content/public/common/child_process_host.h"
+#include "content/public/common/content_descriptors.h"
+#include "content/public/common/content_features.h"
+#include "content/public/common/content_switches.h"
+#include "content/public/common/network_service_util.h"
+#include "content/public/common/url_constants.h"
+#include "content/public/common/url_utils.h"
+#include "content/public/common/user_agent.h"
+#include "content/public/common/window_container_type.mojom-shared.h"
+#include "device/vr/buildflags/buildflags.h"
+#include "extensions/browser/process_map.h"
+#include "extensions/buildflags/buildflags.h"
+#include "google_apis/gaia/gaia_urls.h"
+#include "google_apis/google_api_keys.h"
+#include "gpu/config/gpu_switches.h"
+#include "ipc/ipc_message.h"
+#include "media/audio/audio_manager.h"
+#include "media/base/media_switches.h"
+#include "media/media_buildflags.h"
+#include "media/mojo/buildflags.h"
+#include "media/webrtc/webrtc_switches.h"
+#include "mojo/public/cpp/bindings/pending_associated_receiver.h"
+#include "mojo/public/cpp/bindings/receiver_set.h"
+#include "mojo/public/cpp/bindings/remote.h"
+#include "mojo/public/cpp/bindings/scoped_interface_endpoint_handle.h"
+#include "net/base/load_flags.h"
+#include "net/base/mime_util.h"
+#include "net/http/http_util.h"
+#include "net/ssl/client_cert_store.h"
+#include "net/ssl/ssl_cert_request_info.h"
+#include "pdf/buildflags.h"
+#include "ppapi/buildflags/buildflags.h"
+#include "printing/buildflags/buildflags.h"
+#include "sandbox/policy/features.h"
+#include "sandbox/policy/sandbox_type.h"
+#include "sandbox/policy/switches.h"
+#include "services/metrics/public/cpp/ukm_source_id.h"
+#include "services/network/public/cpp/features.h"
+#include "services/network/public/cpp/is_potentially_trustworthy.h"
+#include "services/network/public/cpp/network_switches.h"
+#include "services/network/public/cpp/resource_request.h"
+#include "services/strings/grit/services_strings.h"
+#include "storage/browser/file_system/external_mount_points.h"
+#include "third_party/blink/public/common/associated_interfaces/associated_interface_registry.h"
+#include "third_party/blink/public/common/features.h"
+#include "third_party/blink/public/common/loader/referrer_utils.h"
+#include "third_party/blink/public/common/loader/url_loader_throttle.h"
+#include "third_party/blink/public/common/renderer_preferences/renderer_preferences.h"
+#include "third_party/blink/public/common/switches.h"
+#include "third_party/blink/public/mojom/federated_learning/floc.mojom.h"
+#include "third_party/blink/public/mojom/site_engagement/site_engagement.mojom.h"
+#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom.h"
+#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom.h"
+#include "third_party/blink/public/public_buildflags.h"
+#include "third_party/skia/include/core/SkColor.h"
+#include "third_party/widevine/cdm/buildflags.h"
+#include "ui/base/clipboard/clipboard_format_type.h"
+#include "ui/base/l10n/l10n_util.h"
+#include "ui/base/page_transition_types.h"
+#include "ui/base/resource/resource_bundle.h"
+#include "ui/base/ui_base_features.h"
+#include "ui/display/display.h"
+#include "ui/gfx/color_utils.h"
+#include "ui/native_theme/native_theme.h"
+#include "ui/resources/grit/ui_resources.h"
+#include "url/gurl.h"
+#include "url/origin.h"
+#include "url/third_party/mozilla/url_parse.h"
+#include "url/url_constants.h"
+
+#if defined(OS_WIN)
+#include "base/strings/string_tokenizer.h"
+#include "base/win/win_util.h"
+#include "base/win/windows_version.h"
+#include "chrome/browser/chrome_browser_main_win.h"
+#include "chrome/install_static/install_util.h"
+#include "sandbox/win/src/sandbox_policy.h"
+#elif defined(OS_MAC)
+#include "chrome/browser/chrome_browser_main_mac.h"
+#include "components/soda/constants.h"
+#include "sandbox/mac/seatbelt_exec.h"
+#include "sandbox/policy/mac/sandbox_mac.h"
+#elif BUILDFLAG(IS_CHROMEOS_ASH)
+#include "ash/public/cpp/ash_pref_names.h"
+#include "ash/public/cpp/tablet_mode.h"
+#include "chrome/app/chrome_crash_reporter_client.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/browser_process_platform_part.h"
+#include "chrome/browser/chromeos/arc/fileapi/arc_content_file_system_backend_delegate.h"
+#include "chrome/browser/chromeos/arc/fileapi/arc_documents_provider_backend_delegate.h"
+#include "chrome/browser/chromeos/chrome_browser_main_chromeos.h"
+#include "chrome/browser/chromeos/chrome_content_browser_client_chromeos_part.h"
+#include "chrome/browser/chromeos/drive/fileapi/drivefs_file_system_backend_delegate.h"
+#include "chrome/browser/chromeos/file_manager/app_id.h"
+#include "chrome/browser/chromeos/file_system_provider/fileapi/backend_delegate.h"
+#include "chrome/browser/chromeos/fileapi/external_file_url_loader_factory.h"
+#include "chrome/browser/chromeos/fileapi/file_system_backend.h"
+#include "chrome/browser/chromeos/fileapi/mtp_file_system_backend_delegate.h"
+#include "chrome/browser/chromeos/login/signin/merge_session_navigation_throttle.h"
+#include "chrome/browser/chromeos/login/signin/merge_session_throttling_utils.h"
+#include "chrome/browser/chromeos/login/signin_partition_manager.h"
+#include "chrome/browser/chromeos/login/startup_utils.h"
+#include "chrome/browser/chromeos/policy/browser_policy_connector_chromeos.h"
+#include "chrome/browser/chromeos/policy/policy_cert_service_factory.h"
+#include "chrome/browser/chromeos/policy/system_features_disable_list_policy_handler.h"
+#include "chrome/browser/chromeos/policy/system_proxy_manager.h"
+#include "chrome/browser/chromeos/profiles/profile_helper.h"
+#include "chrome/browser/chromeos/smb_client/fileapi/smbfs_file_system_backend_delegate.h"
+#include "chrome/browser/chromeos/system/input_device_settings.h"
+#include "chrome/browser/speech/tts_chromeos.h"
+#include "chrome/browser/ui/ash/chrome_browser_main_extra_parts_ash.h"
+#include "chrome/browser/ui/browser_dialogs.h"
+#include "chromeos/components/scanning/url_constants.h"
+#include "chromeos/constants/chromeos_constants.h"
+#include "chromeos/constants/chromeos_features.h"
+#include "chromeos/constants/chromeos_switches.h"
+#include "components/crash/core/app/breakpad_linux.h"
+#include "components/policy/core/common/policy_pref_names.h"
+#include "components/prefs/pref_service.h"
+#include "components/user_manager/user.h"
+#include "components/user_manager/user_manager.h"
+#include "services/service_manager/public/mojom/interface_provider_spec.mojom.h"
+#elif defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
+#include "chrome/browser/chrome_browser_main_linux.h"
+#elif defined(OS_ANDROID)
+#include "base/android/application_status_listener.h"
+#include "base/feature_list.h"
+#include "chrome/android/features/dev_ui/buildflags.h"
+#include "chrome/android/modules/extra_icu/provider/module_provider.h"
+#include "chrome/browser/android/customtabs/client_data_header_web_contents_observer.h"
+#include "chrome/browser/android/devtools_manager_delegate_android.h"
+#include "chrome/browser/android/ntp/new_tab_page_url_handler.h"
+#include "chrome/browser/android/service_tab_launcher.h"
+#include "chrome/browser/android/tab_android.h"
+#include "chrome/browser/android/tab_web_contents_delegate_android.h"
+#include "chrome/browser/chrome_browser_main_android.h"
+#include "chrome/browser/download/android/available_offline_content_provider.h"
+#include "chrome/browser/download/android/intercept_oma_download_navigation_throttle.h"
+#include "chrome/browser/flags/android/chrome_feature_list.h"
+#include "chrome/browser/ui/android/tab_model/tab_model_list.h"
+#include "chrome/common/chrome_descriptors.h"
+#include "components/crash/content/browser/child_exit_observer_android.h"
+#include "components/crash/content/browser/crash_memory_metrics_collector_android.h"
+#include "components/navigation_interception/intercept_navigation_delegate.h"
+#include "content/public/browser/android/java_interfaces.h"
+#include "services/service_manager/public/cpp/interface_provider.h"
+#include "ui/base/resource/resource_bundle_android.h"
+#include "ui/base/ui_base_paths.h"
+#if BUILDFLAG(DFMIFY_DEV_UI)
+#include "chrome/browser/dev_ui/android/dev_ui_loader_throttle.h"
+#endif  // BUILDFLAG(DFMIFY_DEV_UI)
+#elif defined(OS_POSIX)
+#include "chrome/browser/chrome_browser_main_posix.h"
+#endif
+
+#if !BUILDFLAG(IS_CHROMEOS_ASH)
+#include "ui/accessibility/accessibility_features.h"
+#endif  // !BUILDFLAG(IS_CHROMEOS_ASH)
+
+#if !defined(OS_ANDROID)
+#include "chrome/browser/badging/badge_manager.h"
+#include "chrome/browser/devtools/chrome_devtools_manager_delegate.h"
+#include "chrome/browser/devtools/devtools_window.h"
+#include "chrome/browser/media/unified_autoplay_config.h"
+#include "chrome/browser/policy/dm_token_utils.h"
+#include "chrome/browser/search/instant_service.h"
+#include "chrome/browser/search/instant_service_factory.h"
+#include "chrome/browser/serial/chrome_serial_delegate.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/browser_finder.h"
+#include "chrome/browser/ui/browser_list.h"
+#include "chrome/browser/ui/browser_window.h"
+#include "chrome/browser/ui/search/new_tab_page_navigation_throttle.h"
+#include "chrome/browser/webauthn/authenticator_request_scheduler.h"
+#include "chrome/browser/webauthn/chrome_authenticator_request_delegate.h"
+#include "chrome/common/importer/profile_import.mojom.h"
+#include "chrome/grit/chrome_unscaled_resources.h"  // nogncheck crbug.com/1125897
+#endif  //  !defined(OS_ANDROID)
+
+// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
+// of lacros-chrome is complete.
+#if defined(OS_WIN) || defined(OS_MAC) || \
+    (defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS))
+#include "chrome/browser/browser_switcher/browser_switcher_navigation_throttle.h"
+#endif
+
+#if defined(OS_LINUX) || defined(OS_CHROMEOS)
+#include "components/crash/core/app/crash_switches.h"
+#include "components/crash/core/app/crashpad.h"
+#endif
+
+// TODO(crbug.com/939205):  Once the upcoming App Service is available, use a
+// single navigation throttle to display the intent picker on all platforms.
+#if !defined(OS_ANDROID)
+#if BUILDFLAG(IS_CHROMEOS_ASH)
+#include "chrome/browser/chromeos/apps/intent_helper/chromeos_apps_navigation_throttle.h"
+#include "chrome/browser/chromeos/apps/intent_helper/common_apps_navigation_throttle.h"
+#else
+#include "chrome/browser/apps/intent_helper/apps_navigation_throttle.h"
+#endif
+#endif
+
+#if defined(TOOLKIT_VIEWS)
+#include "chrome/browser/ui/views/chrome_browser_main_extra_parts_views.h"
+#endif
+
+// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
+// of lacros-chrome is complete.
+#if defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
+#include "chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.h"
+#endif
+
+#if defined(USE_OZONE)
+#include "ui/ozone/public/ozone_platform.h"
+#endif
+
+#if defined(USE_X11) || defined(USE_OZONE)
+#include "chrome/browser/chrome_browser_main_extra_parts_ozone.h"
+#endif
+
+#if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
+#include "components/captive_portal/content/captive_portal_tab_helper.h"
+#include "components/captive_portal/content/captive_portal_url_loader_throttle.h"
+#endif
+
+#if BUILDFLAG(ENABLE_NACL)
+#include "components/nacl/browser/nacl_browser.h"
+#include "components/nacl/browser/nacl_host_message_filter.h"
+#include "components/nacl/browser/nacl_process_host.h"
+#include "components/nacl/common/nacl_process_type.h"
+#include "components/nacl/common/nacl_switches.h"
+#endif
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+#include "chrome/browser/accessibility/animation_policy_prefs.h"
+#include "chrome/browser/apps/platform_apps/platform_app_navigation_redirector.h"
+#include "chrome/browser/extensions/chrome_content_browser_client_extensions_part.h"
+#include "chrome/browser/extensions/chrome_extension_web_contents_observer.h"
+#include "chrome/browser/extensions/extension_util.h"
+#include "chrome/browser/extensions/user_script_listener.h"
+#include "chrome/browser/speech/extension_api/tts_engine_extension_api.h"
+#include "chrome/browser/ui/browser_commands.h"
+#include "chrome/browser/ui/web_applications/app_browser_controller.h"
+#include "components/guest_view/browser/guest_view_base.h"
+#include "components/guest_view/browser/guest_view_manager.h"
+#include "extensions/browser/api/web_request/web_request_api.h"
+#include "extensions/browser/extension_host.h"
+#include "extensions/browser/extension_navigation_throttle.h"
+#include "extensions/browser/extension_protocols.h"
+#include "extensions/browser/extension_registry.h"
+#include "extensions/browser/extension_system.h"
+#include "extensions/browser/extension_util.h"
+#include "extensions/browser/guest_view/web_view/web_view_guest.h"
+#include "extensions/browser/guest_view/web_view/web_view_permission_helper.h"
+#include "extensions/browser/guest_view/web_view/web_view_renderer_state.h"
+#include "extensions/browser/process_manager.h"
+#include "extensions/common/constants.h"
+#include "extensions/common/extension.h"
+#include "extensions/common/extension_set.h"
+#include "extensions/common/manifest_handlers/background_info.h"
+#include "extensions/common/manifest_handlers/shared_module_info.h"
+#include "extensions/common/manifest_handlers/web_accessible_resources_info.h"
+#include "extensions/common/permissions/permissions_data.h"
+#include "extensions/common/permissions/socket_permission.h"
+#include "extensions/common/switches.h"
+#endif  // BUILDFLAG(ENABLE_EXTENSIONS)
+
+#if BUILDFLAG(ENABLE_PLUGINS)
+#include "chrome/browser/plugins/chrome_content_browser_client_plugins_part.h"
+#include "chrome/browser/plugins/plugin_response_interceptor_url_loader_throttle.h"
+#endif
+
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
+#include "chrome/browser/supervised_user/supervised_user_google_auth_navigation_throttle.h"
+#endif
+
+#if BUILDFLAG(IS_CHROMEOS_ASH)
+#include "chrome/browser/chromeos/app_mode/kiosk_settings_navigation_throttle.h"
+#include "chrome/browser/chromeos/child_accounts/time_limits/web_time_limit_navigation_throttle.h"
+#include "chrome/browser/speech/tts_controller_delegate_impl.h"
+#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
+
+#if BUILDFLAG(ENABLE_MEDIA_REMOTING)
+#include "chrome/browser/media/cast_remoting_connector.h"
+#endif
+
+#if BUILDFLAG(ENABLE_LIBRARY_CDMS)
+#include "chrome/browser/media/output_protection_impl.h"
+#if BUILDFLAG(ENABLE_WIDEVINE)
+#include "third_party/widevine/cdm/widevine_cdm_common.h"
+#if defined(OS_WIN) || BUILDFLAG(USE_CHROMEOS_PROTECTED_MEDIA)
+#include "chrome/browser/media/widevine_hardware_caps.h"
+#endif
+#endif  // BUILDFLAG(ENABLE_WIDEVINE)
+#endif  // BUILDFLAG(ENABLE_LIBRARY_CDMS)
+
+#if BUILDFLAG(ENABLE_SUPERVISED_USERS)
+#include "chrome/browser/supervised_user/supervised_user_navigation_throttle.h"
+#endif
+
+#if BUILDFLAG(SAFE_BROWSING_AVAILABLE)
+#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
+#include "chrome/browser/safe_browsing/client_side_detection_service_factory.h"
+#endif
+
+#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
+#include "chrome/browser/safe_browsing/chrome_enterprise_url_lookup_service.h"  // nogncheck crbug.com/1125897
+#include "chrome/browser/safe_browsing/chrome_enterprise_url_lookup_service_factory.h"  // nogncheck crbug.com/1125897
+#endif
+
+#if BUILDFLAG(ENABLE_OFFLINE_PAGES)
+#include "chrome/browser/offline_pages/offline_page_tab_helper.h"
+#include "chrome/browser/offline_pages/offline_page_url_loader_request_interceptor.h"
+#endif
+
+#if BUILDFLAG(ENABLE_VR) && !defined(OS_ANDROID)
+#include "device/vr/public/mojom/isolated_xr_service.mojom.h"  // nogncheck crbug.com/1125897
+#endif
+
+#if BUILDFLAG(ENABLE_WEBUI_TAB_STRIP)
+#include "chrome/browser/ui/webui/tab_strip/chrome_content_browser_client_tab_strip_part.h"
+#endif
+
+
+#if BUILDFLAG(ENABLE_VR)
+#include "chrome/browser/vr/chrome_xr_integration_client.h"
+#endif
+
+#if BUILDFLAG(IS_CHROMEOS_LACROS)
+#include "chrome/browser/chrome_browser_main_parts_lacros.h"
+#include "chrome/browser/ui/views/chrome_browser_main_extra_parts_views_lacros.h"
+#include "chromeos/lacros/lacros_chrome_service_impl.h"
+#include "ui/base/ui_base_switches.h"
+#endif
+
+#if BUILDFLAG(USE_MINIKIN_HYPHENATION) && !defined(OS_ANDROID)
+#include "chrome/browser/component_updater/hyphenation_component_installer.h"
+#endif
+
+using base::FileDescriptor;
+using blink::mojom::EffectiveConnectionType;
+using blink::web_pref::WebPreferences;
+using content::BrowserThread;
+using content::BrowserURLHandler;
+using content::BrowsingDataFilterBuilder;
+using content::ChildProcessSecurityPolicy;
+using content::QuotaPermissionContext;
+using content::RenderFrameHost;
+using content::RenderViewHost;
+using content::SiteInstance;
+using content::WebContents;
+using message_center::NotifierId;
+
+#if defined(OS_POSIX)
+using content::PosixFileDescriptorInfo;
+#endif
+
+#if BUILDFLAG(ENABLE_EXTENSIONS)
+using extensions::APIPermission;
+using extensions::ChromeContentBrowserClientExtensionsPart;
+using extensions::Extension;
+using extensions::Manifest;
+#endif
+
+#if BUILDFLAG(ENABLE_PLUGINS)
+using plugins::ChromeContentBrowserClientPluginsPart;
+#endif
+
+
+GooroomContentBrowserClient::GooroomContentBrowserClient()
+      : weak_factory_(this) {
+}
+
+
+GooroomContentBrowserClient::~GooroomContentBrowserClient() {
+}
+
+std::unique_ptr<content::BrowserMainParts>
+GooroomContentBrowserClient::CreateBrowserMainParts(
+    const content::MainFunctionParams& parameters) {
+  std::unique_ptr<ChromeBrowserMainParts> main_parts;
+#if defined(OS_WIN)
+  main_parts =
+      std::make_unique<ChromeBrowserMainPartsWin>(parameters, &startup_data_);
+#elif defined(OS_MACOSX)
+  main_parts =
+      std::make_unique<ChromeBrowserMainPartsMac>(parameters, &startup_data_);
+#elif defined(OS_CHROMEOS)
+  main_parts = std::make_unique<chromeos::ChromeBrowserMainPartsChromeos>(
+      parameters, &startup_data_);
+#elif defined(OS_LINUX)
+  main_parts =
+      std::make_unique<ChromeBrowserMainPartsLinux>(parameters, &startup_data_);
+#elif defined(OS_ANDROID)
+  main_parts = std::make_unique<ChromeBrowserMainPartsAndroid>(parameters,
+                                                               &startup_data_);
+#elif defined(OS_POSIX)
+  main_parts =
+      std::make_unique<ChromeBrowserMainPartsPosix>(parameters, &startup_data_);
+#else
+  NOTREACHED();
+  main_parts =
+      std::make_unique<ChromeBrowserMainParts>(parameters, &startup_data_);
+#endif
+
+  bool add_profiles_extra_parts = true;
+#if defined(OS_ANDROID)
+  if (startup_data_->HasBuiltProfilePrefService())
+    add_profiles_extra_parts = false;
+#endif
+  if (add_profiles_extra_parts)
+    chrome::AddProfilesExtraParts(main_parts.get());
+
+    // Construct additional browser parts. Stages are called in the order in
+    // which they are added.
+#if defined(TOOLKIT_VIEWS)
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+  main_parts->AddParts(
+      std::make_unique<ChromeBrowserMainExtraPartsViewsLinux>());
+#else
+  main_parts->AddParts(std::make_unique<ChromeBrowserMainExtraPartsViews>());
+#endif
+#endif
+
+#if defined(OS_CHROMEOS)
+  // TODO(jamescook): Combine with ChromeBrowserMainPartsChromeos.
+  main_parts->AddParts(new ChromeBrowserMainExtraPartsAsh());
+#endif
+
+  main_parts->AddParts(
+      std::make_unique<ChromeBrowserMainExtraPartsPerformanceManager>());
+
+  main_parts->AddParts(
+      std::make_unique<ChromeBrowserMainExtraPartsProfiling>());
+
+  chrome::AddMetricsExtraParts(main_parts.get());
+
+  return main_parts;
+}
+
+void GooroomContentBrowserClient::OnNetworkServiceCreated(
+    network::mojom::NetworkService* network_service) {
+  ChromeContentBrowserClient::OnNetworkServiceCreated(network_service);
+}
+
diff --git a/gooroom/browser/gooroom_content_browser_client.h b/gooroom/browser/gooroom_content_browser_client.h
new file mode 100644
index 000000000..c9e2b0934
--- /dev/null
+++ b/gooroom/browser/gooroom_content_browser_client.h
@@ -0,0 +1,26 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef GOOROOM_BROWSER_CHROME_CONTENT_BROWSER_CLIENT_H_
+#define GOOROOM_BROWSER_CHROME_CONTENT_BROWSER_CLIENT_H_
+
+#include "chrome/browser/chrome_content_browser_client.h"
+#include "content/public/browser/content_browser_client.h"
+
+class GooroomContentBrowserClient : public ChromeContentBrowserClient {
+ public:
+  GooroomContentBrowserClient();
+  ~GooroomContentBrowserClient() override;
+
+  std::unique_ptr<content::BrowserMainParts> CreateBrowserMainParts(
+      const content::MainFunctionParams& parameters) override;
+
+  void OnNetworkServiceCreated(
+      network::mojom::NetworkService* network_service) override;
+
+ private:
+  base::WeakPtrFactory<ChromeContentBrowserClient> weak_factory_;
+};
+
+#endif  // CHROME_BROWSER_CHROME_CONTENT_BROWSER_CLIENT_H_
diff --git a/gooroom/browser/gooroom_content_client.cc b/gooroom/browser/gooroom_content_client.cc
new file mode 100644
index 000000000..e5a79cdf3
--- /dev/null
+++ b/gooroom/browser/gooroom_content_client.cc
@@ -0,0 +1 @@
+#include "gooroom_content_client.h"
diff --git a/gooroom/browser/gooroom_content_client.h b/gooroom/browser/gooroom_content_client.h
new file mode 100644
index 000000000..242ba77e4
--- /dev/null
+++ b/gooroom/browser/gooroom_content_client.h
@@ -0,0 +1,13 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef GOOROOM_CONTENT_CLIENT_H_
+#define GOOROOM_CONTENT_CLIENT_H_
+
+#include "chrome/common/chrome_content_client.h"
+
+class GooroomContentClient : public ChromeContentClient {
+};
+
+#endif  // CHROME_COMMON_CHROME_CONTENT_CLIENT_H_
-- 
2.20.1

