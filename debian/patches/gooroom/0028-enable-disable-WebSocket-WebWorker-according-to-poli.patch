From bb70d9711d1357537d0422041483cdd40eac851c Mon Sep 17 00:00:00 2001
From: junsungc <junsungc@gooroom.kr>
Date: Fri, 24 Jul 2020 11:43:14 +0900
Subject: [PATCH 28/66] enable/disable WebSocket & WebWorker according to
 policy and settings page

---
 chrome/app/settings_strings.grdp              | 14 +++++++++
 .../api/settings_private/prefs_util.cc        |  7 +++++
 chrome/browser/ui/prefs/pref_watcher.cc       |  4 +++
 chrome/browser/ui/prefs/prefs_tab_helper.cc   |  7 +++++
 .../settings_localized_strings_provider.cc    |  2 ++
 .../browser/ui/webui/settings/settings_ui.cc  |  9 ++++++
 chrome/common/pref_names.cc                   |  5 +++
 chrome/common/pref_names.h                    |  5 +++
 gooroom/WebKit/gooroom_enabled_features.cc    |  2 ++
 gooroom/WebKit/gooroom_enabled_features.h     |  9 ++++++
 gooroom/browser/gooroom_pref.h                |  5 +++
 gooroom/content/gooroom_safety_policy_part.cc |  8 +++--
 .../public/platform/web_runtime_features.h    |  2 ++
 .../renderer/core/workers/dedicated_worker.cc | 31 +++++++++++++++++++
 .../modules/websockets/dom_websocket.cc       |  5 +--
 .../platform/exported/web_runtime_features.cc |  8 +++++
 16 files changed, 119 insertions(+), 4 deletions(-)

diff --git a/chrome/app/settings_strings.grdp b/chrome/app/settings_strings.grdp
index 8150ad50079fe..57b92406d6de6 100644
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1889,6 +1889,20 @@
   <message name="IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC_COOKIES_PAGE" desc="On the cookies page, the secondary text next to the checkbox that enables prediction of network actions.">
     Preloads pages that Chrome thinks you might visit. To do this, Chrome may use cookies, if you allow cookies, and may encrypt and send pages through Google to hide your identity from sites.
   </message>
+  <!-- by Gooroom TODO:need to use if-clause-->
+  <message name="IDS_OPTIONS_WEBSOCKET_ENABLE" desc="Websocket confirm enable.">
+    Enable Websocket
+  </message>
+  <message name="IDS_OPTIONS_WEBWORKER_ENABLE" desc="Webworker confirm enable">
+    Enable Webworker
+  </message>
+  <message name="IDS_OPTIONS_WEBSOCKET_CONFIRM_MESSAGE" desc="Websocket confirm">
+    Allow Websocket
+  </message>
+  <message name="IDS_OPTIONS_WEBWORKER_CONFIRM_MESSAGE" desc="Webworker confirm">
+    Allow Webworker
+  </message>
+  <!-- end of ... by Gooroom TODO:need to use if-clause-->
   <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION" desc="The section title of 'Protects you and your device from dangerous sites'">
     Safe Browsing (protects you and your device from dangerous sites)
   </message>
diff --git a/chrome/browser/extensions/api/settings_private/prefs_util.cc b/chrome/browser/extensions/api/settings_private/prefs_util.cc
index efb2269b98d70..458cafd30ff1a 100644
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -883,6 +883,13 @@ const PrefsUtil::TypedPrefMap& PrefsUtil::GetAllowlistedKeys() {
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 
+#if defined(GOOROOM_BUILD)
+  (*s_allowlist)[::prefs::kGooroomOptionWebsocketConfirm] =
+      settings_api::PrefType::PREF_TYPE_BOOLEAN;
+  (*s_allowlist)[::prefs::kGooroomOptionWebworkerConfirm] =
+      settings_api::PrefType::PREF_TYPE_BOOLEAN;
+#endif
+
   // Media Remoting settings.
   (*s_allowlist)[media_router::prefs::kMediaRouterMediaRemotingEnabled] =
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
diff --git a/chrome/browser/ui/prefs/pref_watcher.cc b/chrome/browser/ui/prefs/pref_watcher.cc
index a7dbd620781b5..de8460dd15fc5 100644
--- a/chrome/browser/ui/prefs/pref_watcher.cc
+++ b/chrome/browser/ui/prefs/pref_watcher.cc
@@ -66,6 +66,10 @@ const char* const kWebPrefsToObserve[] = {
 #else
     prefs::kAccessibilityFocusHighlightEnabled,
 #endif
+#if defined(GOOROOM_BUILD)
+    prefs::kGooroomOptionWebsocketConfirm,
+    prefs::kGooroomOptionWebworkerConfirm,
+#endif
 };
 
 const int kWebPrefsToObserveLength = std::size(kWebPrefsToObserve);
diff --git a/chrome/browser/ui/prefs/prefs_tab_helper.cc b/chrome/browser/ui/prefs/prefs_tab_helper.cc
index 38e7f5c8b59ab..54a541dfab399 100644
--- a/chrome/browser/ui/prefs/prefs_tab_helper.cc
+++ b/chrome/browser/ui/prefs/prefs_tab_helper.cc
@@ -431,6 +431,13 @@ void PrefsTabHelper::RegisterProfilePrefs(
   RegisterLocalizedFontPref(registry, prefs::kWebKitMinimumLogicalFontSize,
                             IDS_MINIMUM_LOGICAL_FONT_SIZE);
 #endif
+#if defined(GOOROOM_BUILD)
+  registry->RegisterBooleanPref(prefs::kGooroomOptionWebsocketConfirm,
+                                pref_defaults.websocket_enabled == 1);
+  registry->RegisterBooleanPref(prefs::kGooroomOptionWebworkerConfirm,
+                                pref_defaults.webworker_enabled == 1);
+
+#endif
 }
 
 // static
diff --git a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
index 29a39fe5bccbd..7c525c411a2c6 100644
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -1503,6 +1503,8 @@ void AddPrivacyStrings(content::WebUIDataSource* html_source,
      IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION},
     {"safeBrowsingEnableProtectionDesc",
      IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC},
+    {"websocketEnable", IDS_OPTIONS_WEBSOCKET_ENABLE},
+    {"webworkerEnable", IDS_OPTIONS_WEBWORKER_ENABLE},
     {"safeBrowsingSectionLabel", IDS_SETTINGS_SAFEBROWSING_SECTION_LABEL},
     {"syncAndGoogleServicesPrivacyDescription",
      IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT},
diff --git a/chrome/browser/ui/webui/settings/settings_ui.cc b/chrome/browser/ui/webui/settings/settings_ui.cc
index 3938ee76adcf0..eced1f2652a6e 100644
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -4,6 +4,10 @@
 
 #include "chrome/browser/ui/webui/settings/settings_ui.h"
 
+#if defined(GOOROOM_BUILD)
+#include "gooroom/browser/gooroom_pref.h"
+#endif
+
 #include <stddef.h>
 
 #include <memory>
@@ -363,6 +367,11 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
 
   AddLocalizedStrings(html_source, profile, web_ui->GetWebContents());
 
+#if defined(GOOROOM_BUILD)
+  html_source->AddBoolean("enableGooroomWebsocketSettings", gooroom::g_gooroom->useWebSocket());
+  html_source->AddBoolean("enableGooroomWebworkerSettings", gooroom::g_gooroom->useWebWorker());
+#endif
+
   ManagedUIHandler::Initialize(web_ui, html_source);
 
   content::WebUIDataSource::Add(web_ui->GetWebContents()->GetBrowserContext(),
diff --git a/chrome/common/pref_names.cc b/chrome/common/pref_names.cc
index fa9f63313b213..310b7a25470c5 100644
--- a/chrome/common/pref_names.cc
+++ b/chrome/common/pref_names.cc
@@ -3217,6 +3217,11 @@ const char kIsolateOrigins[] = "site_isolation.isolate_origins";
 // Boolean that specifies opting into --site-per-process (full Site Isolation).
 const char kSitePerProcess[] = "site_isolation.site_per_process";
 
+#if defined(GOOROOM_BUILD)
+const char kGooroomOptionWebsocketConfirm[] = "gooroom_option.websocket_confirm";
+const char kGooroomOptionWebworkerConfirm[] = "gooroom_option.webworker_confirm";
+#endif
+
 // Boolean that is true when the display-capture permissions-policy is enabled.
 // This permissions-policy gates access to getDisplayMedia(), as per this spec:
 // https://www.w3.org/TR/screen-capture/#feature-policy-integration
diff --git a/chrome/common/pref_names.h b/chrome/common/pref_names.h
index 43a21f5996cdf..722206683d66a 100644
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -1103,6 +1103,11 @@ extern const char kSitePerProcess[];
 
 extern const char kDisplayCapturePermissionsPolicyEnabled[];
 
+#if defined(GOOROOM_BUILD)
+extern const char kGooroomOptionWebsocketConfirm[];
+extern const char kGooroomOptionWebworkerConfirm[];
+#endif
+
 #if !BUILDFLAG(IS_ANDROID)
 extern const char kSharedArrayBufferUnrestrictedAccessAllowed[];
 extern const char kAutoplayAllowed[];
diff --git a/gooroom/WebKit/gooroom_enabled_features.cc b/gooroom/WebKit/gooroom_enabled_features.cc
index 1e665323d2525..26485d0e9fc05 100644
--- a/gooroom/WebKit/gooroom_enabled_features.cc
+++ b/gooroom/WebKit/gooroom_enabled_features.cc
@@ -4,5 +4,7 @@ namespace blink {
 
 bool GooroomEnabledFeatures::isWebSocketEnabled = true;
 bool GooroomEnabledFeatures::isWebWorkerEnabled = true;
+bool GooroomEnabledFeatures::isWebSocketConfirmEnabled = true;
+bool GooroomEnabledFeatures::isWebWorkerConfirmEnabled = true;
 
 } // end of content namespace
diff --git a/gooroom/WebKit/gooroom_enabled_features.h b/gooroom/WebKit/gooroom_enabled_features.h
index 70b4f9f59f35f..15a2befec2118 100644
--- a/gooroom/WebKit/gooroom_enabled_features.h
+++ b/gooroom/WebKit/gooroom_enabled_features.h
@@ -15,9 +15,18 @@ class PLATFORM_EXPORT GooroomEnabledFeatures {
   static void SetWebWorkerEnabled(bool isEnabled) { isWebWorkerEnabled = isEnabled; }
   static bool WebWorkerEnabled() { return isWebWorkerEnabled; }
 
+  static void SetWebSocketConfirmEnabled(bool isEnabled) { isWebSocketConfirmEnabled = isEnabled; }
+  static bool WebSocketConfirmEnabled() { return isWebSocketConfirmEnabled; }
+
+  static void SetWebWorkerConfirmEnabled(bool isEnabled) { isWebWorkerConfirmEnabled = isEnabled; }
+  static bool WebWorkerConfirmEnabled() { return isWebWorkerConfirmEnabled; }
+
  private:
   static bool isWebSocketEnabled;
   static bool isWebWorkerEnabled;
+  static bool isWebSocketConfirmEnabled;
+  static bool isWebWorkerConfirmEnabled;
+
 };
 
 } // end of blink namespace
diff --git a/gooroom/browser/gooroom_pref.h b/gooroom/browser/gooroom_pref.h
index 48743247de091..ca38e62589784 100644
--- a/gooroom/browser/gooroom_pref.h
+++ b/gooroom/browser/gooroom_pref.h
@@ -19,6 +19,11 @@ const char kPolicyGooroomWebSocket[] = "gooroom.policy.websocket";
 /** webworker confirm policy */
 const char kPolicyGooroomWebWorker[] = "gooroom.policy.webworker";
 
+/** websocket confirm enable/disable */
+const char kGooroomWebSocketConfirm[] = "gooroom.websocket.confirm";
+/** webwork confirm enable/disable */
+const char kGooroomWebWorkerConfirm[] = "gooroom.webworker.confirm";
+
 class GooroomPref {
  public:
   GooroomPref();
diff --git a/gooroom/content/gooroom_safety_policy_part.cc b/gooroom/content/gooroom_safety_policy_part.cc
index d57cfcdf4230e..86b07d5838794 100644
--- a/gooroom/content/gooroom_safety_policy_part.cc
+++ b/gooroom/content/gooroom_safety_policy_part.cc
@@ -15,15 +15,19 @@ GooroomSafetyPolicyPart::~GooroomSafetyPolicyPart() {}
 void GooroomSafetyPolicyPart::OverrideWebkitPrefs(
     content::WebContents* web_contents,
     blink::web_pref::WebPreferences* web_prefs) {
+  Profile* profile = g_browser_process->profile_manager()->GetLastUsedProfile();
+  PrefService* ps = profile->GetPrefs();
 
   if (gooroom::g_gooroom->useWebSocket()) {
-    web_prefs->websocket_enabled = true;
+    bool confirm = ps->GetBoolean("gooroom_option.websocket_confirm");
+    web_prefs->websocket_enabled = confirm ? 1 : 2;
   } else {
     web_prefs->websocket_enabled = false;
   }
 
   if (gooroom::g_gooroom->useWebWorker()) {
-    web_prefs->webworker_enabled = true;
+    bool confirm = ps->GetBoolean("gooroom_option.webworker_confirm");
+    web_prefs->webworker_enabled = confirm ? 1 : 2;
   } else {
     web_prefs->webworker_enabled = false;
   }
diff --git a/third_party/blink/public/platform/web_runtime_features.h b/third_party/blink/public/platform/web_runtime_features.h
index 0f5f5d2a22390..ae5f2092a580b 100644
--- a/third_party/blink/public/platform/web_runtime_features.h
+++ b/third_party/blink/public/platform/web_runtime_features.h
@@ -44,6 +44,8 @@ class WebRuntimeFeatures {
 #if defined(GOOROOM_BUILD)
   BLINK_PLATFORM_EXPORT static void EnableWebSocket(bool);
   BLINK_PLATFORM_EXPORT static void EnableWebWorker(bool);
+  BLINK_PLATFORM_EXPORT static void EnableWebSocketConfirm(bool);
+  BLINK_PLATFORM_EXPORT static void EnableWebWorkerConfirm(bool);
 #endif
 
   // Enable or disable features with status=experimental listed in
diff --git a/third_party/blink/renderer/core/workers/dedicated_worker.cc b/third_party/blink/renderer/core/workers/dedicated_worker.cc
index d45460f79cd66..d58bdedf8ab37 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker.cc
+++ b/third_party/blink/renderer/core/workers/dedicated_worker.cc
@@ -4,6 +4,19 @@
 
 #include "third_party/blink/renderer/core/workers/dedicated_worker.h"
 
+#if defined(GOOROOM_BUILD)
+#include "base/syslog_logging.h"
+#include "chrome/grit/generated_resources.h"
+#include "third_party/blink/renderer/core/page/chrome_client.h"
+#include "third_party/blink/renderer/core/page/page.h"
+#include "third_party/blink/renderer/core/frame/local_dom_window.h"
+#include "ui/base/l10n/l10n_util.h"
+#include "url/gurl.h"
+
+#include "gooroom/WebKit/gooroom_enabled_features.h"
+#include "gooroom/base/gooroom_base.h"
+#endif
+
 #include <utility>
 
 #include "base/feature_list.h"
@@ -65,6 +78,24 @@ DedicatedWorker* DedicatedWorker::Create(ExecutionContext* context,
                                          const WorkerOptions* options,
                                          ExceptionState& exception_state) {
   DCHECK(context->IsContextThread());
+
+#if defined(GOOROOM_BUILD)
+  if (!GooroomEnabledFeatures::WebWorkerEnabled() || !GooroomEnabledFeatures::WebWorkerConfirmEnabled()) {
+    SYSLOG(INFO) << "Using WebSocket is not permitted";
+    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
+                                      "Using WebSocket is not permitted");
+
+//    LocalFrame* frm = context->ExecutingWindow()->GetFrame();
+    LocalFrame* frm = DynamicTo<LocalDOMWindow>(context)->GetFrame();
+
+    Page* page = frm->GetPage();
+    // FIXME : care character encoding
+    page->GetChromeClient().OpenJavaScriptConfirm(frm, WTF::String::FromUTF8("梨 몃 곌껐 媛 李⑤⑤듬 뱀而ㅼ 명댁＜몄."));
+
+    return nullptr;
+  }
+#endif
+
   UseCounter::Count(context, WebFeature::kWorkerStart);
   if (context->IsContextDestroyed()) {
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
diff --git a/third_party/blink/renderer/modules/websockets/dom_websocket.cc b/third_party/blink/renderer/modules/websockets/dom_websocket.cc
index d86324efb08c0..51c42bb14e105 100644
--- a/third_party/blink/renderer/modules/websockets/dom_websocket.cc
+++ b/third_party/blink/renderer/modules/websockets/dom_websocket.cc
@@ -277,7 +277,7 @@ void DOMWebSocket::Connect(const String& url,
   // url has scheme "wss://" (e.g., wss://echo.websocket.org?encoding=text)
   // printf("Requested WebSocket : %s \n", gurl_.spec().data());
 
-  if (!GooroomEnabledFeatures::WebSocketEnabled()) {
+  if (!GooroomEnabledFeatures::WebSocketEnabled() || !GooroomEnabledFeatures::WebSocketConfirmEnabled()) {
     SYSLOG(INFO) << "Using WebSocket is not permitted";
     exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
                                       "Using WebSocket is not permitted");
@@ -286,7 +286,8 @@ void DOMWebSocket::Connect(const String& url,
     LocalFrame* frm = DynamicTo<LocalDOMWindow>(GetExecutionContext())->GetFrame();
     Page* page = frm->GetPage();
     // FIXME : care character encoding
-    page->GetChromeClient().OpenJavaScriptConfirm(frm, WTF::String::FromUTF8("梨 몃 곌껐 媛 李⑤⑤듬"));
+    page->GetChromeClient().OpenJavaScriptConfirm(frm, WTF::String::FromUTF8("梨 몃 곌껐 媛 李⑤⑤듬 뱀耳 ㅼ 명댁＜몄."));
+
     //page->GetChromeClient().OpenJavaScriptAlert(
     //    frm, "External connection attempts were blocked by policy.");
  
diff --git a/third_party/blink/renderer/platform/exported/web_runtime_features.cc b/third_party/blink/renderer/platform/exported/web_runtime_features.cc
index b4b6402767501..4740690f10a99 100644
--- a/third_party/blink/renderer/platform/exported/web_runtime_features.cc
+++ b/third_party/blink/renderer/platform/exported/web_runtime_features.cc
@@ -543,6 +543,14 @@ void WebRuntimeFeatures::EnableWebSocket(bool enable) {
 void WebRuntimeFeatures::EnableWebWorker(bool enable) {
   GooroomEnabledFeatures::SetWebWorkerEnabled(enable);
 }
+
+void WebRuntimeFeatures::EnableWebSocketConfirm(bool enable) {
+  GooroomEnabledFeatures::SetWebSocketConfirmEnabled(enable);
+}
+
+void WebRuntimeFeatures::EnableWebWorkerConfirm(bool enable) {
+  GooroomEnabledFeatures::SetWebWorkerConfirmEnabled(enable);
+}
 #endif
 
 void WebRuntimeFeatures::EnableDocumentPolicy(bool enable) {
-- 
2.30.2

