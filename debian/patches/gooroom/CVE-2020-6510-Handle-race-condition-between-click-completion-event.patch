From 5bed3795cf28cdb67c8ef30f97a2c70a24b95a6b Mon Sep 17 00:00:00 2001
From: Rayan Kanso <rayankans@google.com>
Date: Mon, 13 Jul 2020 17:58:45 +0000
Subject: [PATCH 1/2] Handle race condition between click & completion event.

(cherry picked from commit 6de0038b1125619e64315006b2b92872a83e8915)
TBR=rayankans@chromium.org

Bug: 1103195
Change-Id: Ic7fca228e9aff2172fc59c16c01c7edc06003f51
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2289428
Reviewed-by: Peter Beverloo <peter@chromium.org>
Commit-Queue: Rayan Kanso <rayankans@chromium.org>
Cr-Original-Commit-Position: refs/heads/master@{#787185}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2295040
Reviewed-by: Krishna Govind <govind@chromium.org>
Reviewed-by: Rayan Kanso <rayankans@chromium.org>
Commit-Queue: Jorge Lucangeli Obes <jorgelo@chromium.org>
Cr-Commit-Position: refs/branch-heads/4103@{#742}
Cr-Branched-From: 8ad47e8d21f6866e4a37f47d83a860d41debf514-refs/heads/master@{#756066}
---
 .../background_fetch_scheduler.cc             | 23 +++++++++++++++----
 .../background_fetch_scheduler.h              | 19 +++++++++++----
 2 files changed, 32 insertions(+), 10 deletions(-)

diff --git a/content/browser/background_fetch/background_fetch_scheduler.cc b/content/browser/background_fetch/background_fetch_scheduler.cc
index da1c6bf2bebb..4e2d28de5604 100644
--- a/content/browser/background_fetch/background_fetch_scheduler.cc
+++ b/content/browser/background_fetch/background_fetch_scheduler.cc
@@ -88,6 +88,13 @@ BackgroundFetchScheduler::BackgroundFetchScheduler(
 
 BackgroundFetchScheduler::~BackgroundFetchScheduler() = default;
 
+BackgroundFetchScheduler::RegistrationData::RegistrationData(
+    const BackgroundFetchRegistrationId& registration_id,
+    blink::mojom::BackgroundFetchRegistrationDataPtr registration)
+    : registration_id(registration_id), registration(std::move(registration)) {}
+
+BackgroundFetchScheduler::RegistrationData::~RegistrationData() = default;
+
 bool BackgroundFetchScheduler::ScheduleDownload() {
   DCHECK_LT(num_running_downloads_, max_running_downloads_);
 
@@ -207,8 +214,8 @@ void BackgroundFetchScheduler::FinishJob(
 
   auto it = job_controllers_.find(registration_id.unique_id());
   if (it != job_controllers_.end()) {
-    completed_fetches_[it->first] = {registration_id,
-                                     it->second->NewRegistrationData()};
+    completed_fetches_[it->first] = std::make_unique<RegistrationData>(
+        registration_id, it->second->NewRegistrationData());
 
     // Reset scheduler params.
     num_running_downloads_ -= it->second->pending_downloads();
@@ -242,7 +249,7 @@ void BackgroundFetchScheduler::DidMarkForDeletion(
   DCHECK(it != completed_fetches_.end());
 
   blink::mojom::BackgroundFetchRegistrationDataPtr& registration_data =
-      it->second.second;
+      it->second->registration;
   // Include any other failure reasons the marking for deletion may have found.
   if (registration_data->failure_reason == BackgroundFetchFailureReason::NONE)
     registration_data->failure_reason = failure_reason;
@@ -268,6 +275,9 @@ void BackgroundFetchScheduler::DidMarkForDeletion(
     // No need to keep the controller around since there won't be dispatch
     // events.
     completed_fetches_.erase(it);
+  } else {
+    // The registration is now safe to delete.
+    it->second->processing_completed = true;
   }
 }
 
@@ -305,8 +315,11 @@ void BackgroundFetchScheduler::DispatchClickEvent(
     return;
 
   event_dispatcher_.DispatchBackgroundFetchClickEvent(
-      it->second.first, std::move(it->second.second), base::DoNothing());
-  completed_fetches_.erase(unique_id);
+      it->second->registration_id, it->second->registration.Clone(),
+      base::DoNothing());
+
+  if (it->second->processing_completed)
+    completed_fetches_.erase(unique_id);
 }
 
 std::unique_ptr<BackgroundFetchJobController>
diff --git a/content/browser/background_fetch/background_fetch_scheduler.h b/content/browser/background_fetch/background_fetch_scheduler.h
index f48e974ed2f4..f1e27f402f02 100644
--- a/content/browser/background_fetch/background_fetch_scheduler.h
+++ b/content/browser/background_fetch/background_fetch_scheduler.h
@@ -171,14 +171,23 @@ class CONTENT_EXPORT BackgroundFetchScheduler
   // The current fetch job controllers that are being processed.
   base::circular_deque<BackgroundFetchJobController*> active_controllers_;
 
-  // Map from |unique_id|s to {|registration_id|, |registration|}.
+  struct RegistrationData {
+    RegistrationData(
+        const BackgroundFetchRegistrationId& registration_id,
+        blink::mojom::BackgroundFetchRegistrationDataPtr registration);
+    ~RegistrationData();
+
+    BackgroundFetchRegistrationId registration_id;
+    blink::mojom::BackgroundFetchRegistrationDataPtr registration;
+    // Wheter all processing is completed and this data is safe to erase now.
+    bool processing_completed = false;
+  };
+
+  // Map from |unique_id|s to the registration data.
   // An entry in here means the fetch has completed. This information is needed
   // after the fetch has completed to dispatch the backgroundfetchclick event.
   // TODO(crbug.com/857122): Clean this up when the UI is no longer showing.
-  std::map<std::string,
-           std::pair<BackgroundFetchRegistrationId,
-                     blink::mojom::BackgroundFetchRegistrationDataPtr>>
-      completed_fetches_;
+  std::map<std::string, std::unique_ptr<RegistrationData>> completed_fetches_;
 
   // Scheduling params - Finch configurable.
   int max_running_downloads_;
-- 
2.20.1

