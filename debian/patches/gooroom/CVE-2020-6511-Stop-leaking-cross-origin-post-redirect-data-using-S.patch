From 79383e9f97e8add0b3511fbd59ed522dfb7a0f9a Mon Sep 17 00:00:00 2001
From: arthursonzogni <arthursonzogni@chromium.org>
Date: Mon, 11 May 2020 15:58:36 +0000
Subject: [PATCH 2/2] Stop leaking cross-origin post-redirect data using
 StackTrace.

Whenever a URL is provided to the ScriptSourceCode constructor, use
the "request URL" instead of the "response URL".

This avoids malicious website to get access to the post-redirect URL.
They can get this by throwing an error and inspecting the error.stack.

The new behavior can be observed in:
1) The 'source-file' in CSP violations reports.
2) The URL(s) in javascript stack traces.
3) How relative source map are resolved.

After this patch (1), (2), (3) are now aligned with Firefox.

After this patch (3) is now matching with the specification:
https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#

This patch might break some client using devtool (See 3). A temporary command
line argument is provided to restore the old behavior:
--enable-features=UnsafeScriptReportPostRedirectURL
If you are using this flag, please let us know by filling a bug on
https://crbug.com

This flags can potentially be used to restore the old behavior on stable
using Finch if needed.

If nobody is complaining about the new behavior. The flag can be removed
after one release.

Bug: 1074317
Change-Id: I3629a5a0f8d67c13127f08ab36dc3df69aa0f98f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2187792
Commit-Queue: Arthur Sonzogni <arthursonzogni@chromium.org>
Reviewed-by: Sigurd Schneider <sigurds@chromium.org>
Reviewed-by: Mike West <mkwst@chromium.org>
Cr-Commit-Position: refs/heads/master@{#767326}
---
 .../bindings/core/v8/script_source_code.cc         | 14 ++++++++++++--
 .../renderer/bindings/core/v8/script_source_code.h | 14 ++++++++++++++
 .../renderer/core/workers/worker_global_scope.cc   |  4 +++-
 3 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/third_party/blink/renderer/bindings/core/v8/script_source_code.cc b/third_party/blink/renderer/bindings/core/v8/script_source_code.cc
index 46148496dd4e..38d117601d68 100644
--- a/third_party/blink/renderer/bindings/core/v8/script_source_code.cc
+++ b/third_party/blink/renderer/bindings/core/v8/script_source_code.cc
@@ -4,6 +4,7 @@
 
 #include "third_party/blink/renderer/bindings/core/v8/script_source_code.h"
 
+#include "base/feature_list.h"
 #include "third_party/blink/renderer/core/loader/resource/script_resource.h"
 #include "third_party/blink/renderer/platform/loader/fetch/cached_metadata_handler.h"
 
@@ -47,8 +48,16 @@ String SourceMapUrlFromResponse(const ResourceResponse& response) {
   return response.HttpHeaderField(http_names::kXSourceMap);
 }
 
+const base::Feature kUnsafeScriptReportPostRedirectURL{
+    "UnsafeScriptReportPostRedirectURL", base::FEATURE_DISABLED_BY_DEFAULT};
+
 }  // namespace
 
+// static
+bool ScriptSourceCode::UsePostRedirectURL() {
+  return base::FeatureList::IsEnabled(kUnsafeScriptReportPostRedirectURL);
+}
+
 ScriptSourceCode::ScriptSourceCode(
     const ParkableString& source,
     ScriptSourceLocationType source_location_type,
@@ -84,8 +93,9 @@ ScriptSourceCode::ScriptSourceCode(ScriptStreamer* streamer,
       cache_handler_(resource->CacheHandler()),
       streamer_(streamer),
       not_streaming_reason_(reason),
-      url_(
-          StripFragmentIdentifier(resource->GetResponse().CurrentRequestUrl())),
+      url_(StripFragmentIdentifier(
+          UsePostRedirectURL() ? resource->GetResponse().CurrentRequestUrl()
+                               : resource->Url())),
       source_map_url_(SourceMapUrlFromResponse(resource->GetResponse())),
       start_position_(TextPosition::MinimumPosition()),
       source_location_type_(ScriptSourceLocationType::kExternalFile) {
diff --git a/third_party/blink/renderer/bindings/core/v8/script_source_code.h b/third_party/blink/renderer/bindings/core/v8/script_source_code.h
index eff28959c340..f7e38a00d200 100644
--- a/third_party/blink/renderer/bindings/core/v8/script_source_code.h
+++ b/third_party/blink/renderer/bindings/core/v8/script_source_code.h
@@ -49,6 +49,20 @@ class CORE_EXPORT ScriptSourceCode final {
   DISALLOW_NEW();
 
  public:
+  // Return whether chrome should use the request URL or the response URL as the
+  // 'url' of the script. This can be observed in:
+  // 1) The 'source-file' in CSP violations reports.
+  // 2) The URL(s) in javascript stack traces.
+  // 3) How relative source map are resolved.
+  //
+  // This returns false by default. This corresponds to the current
+  // specification and matches Firefox behavior. This also avoids leaking
+  // post-redirect data cross-origin. See https://crbug.com/1074317.
+  //
+  // This can be enabled using the switch:
+  // --enable-features=UnsafeScriptReportPostRedirectURL
+  static bool UsePostRedirectURL();
+
   // For inline scripts.
   ScriptSourceCode(
       const String& source,
diff --git a/third_party/blink/renderer/core/workers/worker_global_scope.cc b/third_party/blink/renderer/core/workers/worker_global_scope.cc
index ee2b239577f2..28b392f231f3 100644
--- a/third_party/blink/renderer/core/workers/worker_global_scope.cc
+++ b/third_party/blink/renderer/core/workers/worker_global_scope.cc
@@ -297,7 +297,9 @@ void WorkerGlobalScope::ImportScriptsInternal(const Vector<String>& urls,
         source_code.length(), handler ? handler->GetCodeCacheSize() : 0);
     ScriptController()->Evaluate(
         ScriptSourceCode(source_code, ScriptSourceLocationType::kUnknown,
-                         handler, response_url),
+                         handler,
+                         ScriptSourceCode::UsePostRedirectURL() ? response_url
+                                                                : complete_url),
         sanitize_script_errors, &error_event, GetV8CacheOptions());
     if (error_event) {
       ScriptController()->RethrowExceptionFromImportedScript(error_event,
-- 
2.20.1

