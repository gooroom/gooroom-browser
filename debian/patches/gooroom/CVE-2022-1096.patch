From f2f44331a14004af99f6508d2aed029b2b48cb3f Mon Sep 17 00:00:00 2001
From: Igor Sheludko <ishell@chromium.org>
Date: Thu, 24 Mar 2022 17:39:08 +0100
Subject: [PATCH 1/2] Merged: [runtime] Fix handling of interceptors

Bug: chromium:1309225
Change-Id: If1eb290c19d26db2a024f1ea0f4c7c70fa1b3aad
No-Try: true
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3550258
Reviewed-by: Shu-yu Guo <syg@chromium.org>
Owners-Override: Shu-yu Guo <syg@chromium.org>
Bot-Commit: Rubber Stamper <rubber-stamper@appspot.gserviceaccount.com>
Commit-Queue: Shu-yu Guo <syg@chromium.org>
Cr-Commit-Position: refs/branch-heads/9.9@{#18}
Cr-Branched-From: c4208cca4b053300b7ae3d297790c7dcd0be551a-refs/heads/9.9.115@{#1}
Cr-Branched-From: 19c6fd735108efee9d782c8f01ce0b7611a93621-refs/heads/main@{#78682}
---
 v8/src/objects/objects.cc                     | 10 +++++++---
 v8/test/cctest/test-api-interceptors.cc       |  8 ++++----
 v8/test/unittests/api/interceptor-unittest.cc |  4 ++--
 3 files changed, 13 insertions(+), 9 deletions(-)

diff --git a/v8/src/objects/objects.cc b/v8/src/objects/objects.cc
index 05433226be..9f428b1e61 100644
--- a/v8/src/objects/objects.cc
+++ b/v8/src/objects/objects.cc
@@ -2507,6 +2507,12 @@ Maybe<bool> Object::SetPropertyInternal(LookupIterator* it,
           Maybe<bool> result =
               JSObject::SetPropertyWithInterceptor(it, should_throw, value);
           if (result.IsNothing() || result.FromJust()) return result;
+          // Assuming that the callback have side effects, we use
+          // Object::SetSuperProperty() which works properly regardless on
+          // whether the property was present on the receiver or not when
+          // storing to the receiver.
+          // Proceed lookup from the next state.
+          it->Next();
         } else {
           Maybe<PropertyAttributes> maybe_attributes =
               JSObject::GetPropertyAttributesWithInterceptor(it);
@@ -2527,10 +2533,8 @@ Maybe<bool> Object::SetPropertyInternal(LookupIterator* it,
             // property to the receiver.
             it->NotFound();
           }
-          return Object::SetSuperProperty(it, value, store_origin,
-                                          should_throw);
         }
-        break;
+        return Object::SetSuperProperty(it, value, store_origin, should_throw);
       }
 
       case LookupIterator::ACCESSOR: {
diff --git a/v8/test/cctest/test-api-interceptors.cc b/v8/test/cctest/test-api-interceptors.cc
index fe5524a0ee..909795ece4 100644
--- a/v8/test/cctest/test-api-interceptors.cc
+++ b/v8/test/cctest/test-api-interceptors.cc
@@ -5833,10 +5833,10 @@ void DatabaseGetter(Local<Name> name,
                     const v8::PropertyCallbackInfo<Value>& info) {
   ApiTestFuzzer::Fuzz();
   auto context = info.GetIsolate()->GetCurrentContext();
-  Local<v8::Object> db = info.Holder()
-                             ->GetRealNamedProperty(context, v8_str("db"))
-                             .ToLocalChecked()
-                             .As<v8::Object>();
+  v8::MaybeLocal<Value> maybe_db =
+      info.Holder()->GetRealNamedProperty(context, v8_str("db"));
+  if (maybe_db.IsEmpty()) return;
+  Local<v8::Object> db = maybe_db.ToLocalChecked().As<v8::Object>();
   if (!db->Has(context, name).FromJust()) return;
   info.GetReturnValue().Set(db->Get(context, name).ToLocalChecked());
 }
diff --git a/v8/test/unittests/api/interceptor-unittest.cc b/v8/test/unittests/api/interceptor-unittest.cc
index a1f6cbdc36..635bf6a0b7 100644
--- a/v8/test/unittests/api/interceptor-unittest.cc
+++ b/v8/test/unittests/api/interceptor-unittest.cc
@@ -174,8 +174,8 @@ TEST_F(InterceptorLoggingTest, DispatchTest) {
   EXPECT_EQ(Run("obj.foo"), "named getter");
   EXPECT_EQ(Run("obj[42]"), "indexed getter");
 
-  EXPECT_EQ(Run("obj.foo = null"), "named setter");
-  EXPECT_EQ(Run("obj[42] = null"), "indexed setter");
+  EXPECT_EQ(Run("obj.foo = null"), "named setter, named descriptor");
+  EXPECT_EQ(Run("obj[42] = null"), "indexed setter, indexed descriptor");
 
   EXPECT_EQ(Run("Object.getOwnPropertyDescriptor(obj, 'foo')"),
             "named descriptor");
-- 
2.30.2

