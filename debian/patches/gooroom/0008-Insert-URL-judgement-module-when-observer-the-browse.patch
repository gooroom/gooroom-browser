From 79ed53dab6f738274cc4d6c9abe58da757a9dd11 Mon Sep 17 00:00:00 2001
From: junsungc <junsungc@gooroom.kr>
Date: Wed, 22 Jul 2020 15:31:12 +0900
Subject: [PATCH 08/71] Insert URL judgement module when observer the browser.

---
 .../browser/web_contents/web_contents_impl.cc | 101 ++++++++++++++++++
 1 file changed, 101 insertions(+)

diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index a5fb571b38e1..6f39bd09427b 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -12,6 +12,11 @@
 #include <utility>
 #include <vector>
 
+#if BUILDFLAG(ENABLE_GOOROOM)
+#include "base/path_service.h"
+#include "gooroom/base/gooroom_base.h"
+#endif
+
 #include "base/bind.h"
 #include "base/command_line.h"
 #include "base/containers/flat_set.h"
@@ -5100,6 +5105,95 @@ void WebContentsImpl::DidStartNavigation(NavigationHandle* navigation_handle) {
   }
 }
 
+#if BUILDFLAG(ENABLE_GOOROOM)
+
+// switches::kUserDataDir[] is declared in "chrome/common/chrome_switches.h". To
+// use this, you can include "chrome/common/chrome_swithces.h" and make
+// //contents/browser to depends on //chrome/common:constants. but, it is not
+// available after commit:820f161. So Instead, just re-declared it in here.
+const char kUserDataDir[] = "user-data-dir";
+
+
+// It is a function that determines whether it is trusted mode or untrusted mode.
+// and exec if necessary (browser switching).
+bool RequestCurrentUserDataDir(GURL url) {
+  base::GooroomUrlFilter* pFilter = base::GetGooroomBase()->getUrlFilter();
+
+  if (!pFilter) return false;
+
+  //Chrome pages are excluded from trust/untrust judgment.
+  if (url.scheme() == "chrome" || url.scheme() == "chrome-extension" ||
+      url.scheme() == "chrome-search" || url.scheme() == "chrome-devtools" ||
+      url.scheme() == "about")
+    return false;
+
+  if (url.spec().find("chrome/newtab") != std::string::npos)
+    return false;
+
+  bool trusted = pFilter->isTrustUrl(url.spec());
+
+  std::string assigned_user_data_dir;
+  base::FilePath home_path_dir;
+  base::PathService::Get(base::DIR_HOME, &home_path_dir);
+
+  if (trusted) {
+    assigned_user_data_dir =
+        home_path_dir.AsUTF8Unsafe() + "/.config/gooroom/trust";
+  } else {
+    assigned_user_data_dir =
+        home_path_dir.AsUTF8Unsafe() + "/.config/gooroom/untrust";
+  }
+
+  base::CommandLine* cmdline = base::CommandLine::ForCurrentProcess();
+  base::FilePath user_data_dir =
+      cmdline->GetSwitchValuePath(kUserDataDir);
+
+  if (user_data_dir.AsUTF8Unsafe() == assigned_user_data_dir)
+    return false; // same permission
+
+  base::FilePath exe_path_dir;
+  base::PathService::Get(base::DIR_EXE, &exe_path_dir);
+
+  DLOG(INFO) << "exe_path_dir = " << exe_path_dir.AsUTF8Unsafe();
+  std::string exe_path = exe_path_dir.AsUTF8Unsafe() + "/gooroom-browser";
+  std::string trust_user_data_dir_option =
+      "--user-data-dir=" + home_path_dir.AsUTF8Unsafe() +
+      "/.config/gooroom/trust";
+  std::string untrust_user_data_dir_option =
+      "--user-data-dir=" + home_path_dir.AsUTF8Unsafe() +
+      "/.config/gooroom/untrust";
+
+  //TODO need to get the flash version dynamically.
+  std::string flash_dir = "--ppapi-flash-path=/usr/lib/adobe-flashplugin/libpepflashplayer.so";
+  std::string flash_version = "--ppapi-flash-version=31.0.0.153";
+
+  int pid;
+  //TODO do not discard other options when exec
+  if (trusted) {
+    pid = fork();
+    if (pid != 0) {
+      return true;  // true is blank.. false is continue.
+    } else {
+      execl(exe_path.c_str(), "gooroom-browser",
+            trust_user_data_dir_option.c_str(), flash_dir.c_str(), flash_version.c_str(), url.spec().c_str(), NULL);
+      exit(0);
+    }
+  } else {
+    pid = fork();
+    if (pid != 0) {
+      return true;
+    } else {
+      execl(exe_path.c_str(), "gooroom-browser",
+            untrust_user_data_dir_option.c_str(), flash_dir.c_str(), flash_version.c_str(), url.spec().c_str(), NULL);
+      exit(0);
+    }
+  }
+
+  return false;
+}
+#endif // #if BUILDFLAG(ENABLE_GOOROOM)
+
+
 void WebContentsImpl::DidRedirectNavigation(
     NavigationHandle* navigation_handle) {
   TRACE_EVENT1("navigation", "WebContentsImpl::DidRedirectNavigation",
@@ -5235,6 +5329,13 @@ void WebContentsImpl::DidFinishNavigation(NavigationHandle* navigation_handle) {
         GetMainFrame()->frame_tree_node()->GetFrameTreeSize();
   }
 
+#if BUILDFLAG(ENABLE_GOOROOM)
+//If browser is switched, the current page is closed.
+  if (navigation_handle->IsInMainFrame() && RequestCurrentUserDataDir(navigation_handle->GetURL())) {
+    ClosePage();
+  }
+#endif
+
   if (web_preferences_) {
     // Update the WebPreferences for this WebContents that depends on changes
     // that might occur during navigation. This will only update the preferences
-- 
2.20.1

