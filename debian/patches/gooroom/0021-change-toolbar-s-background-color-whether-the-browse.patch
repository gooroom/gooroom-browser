From 93dcb777c625045ec50b4d064e3e6ad30ce8fdce Mon Sep 17 00:00:00 2001
From: junsungc <junsungc@gooroom.kr>
Date: Thu, 23 Jul 2020 17:16:15 +0900
Subject: [PATCH 21/66] change toolbar's background color whether the browser's
 type is trust or untrust

---
 ui/color/ui_color_mixer.cc | 49 +++++++++++++++++++++++++++++++++++---
 1 file changed, 46 insertions(+), 3 deletions(-)

diff --git a/ui/color/ui_color_mixer.cc b/ui/color/ui_color_mixer.cc
index ca33acaffdb3c..2150a9777feb6 100644
--- a/ui/color/ui_color_mixer.cc
+++ b/ui/color/ui_color_mixer.cc
@@ -13,10 +13,54 @@
 #include "ui/color/color_transform.h"
 #include "ui/gfx/color_palette.h"
 
+#include "base/path_service.h"
+#include "base/command_line.h"
+#include "base/files/file_path.h"
+
 namespace ui {
 
 void AddUiColorMixer(ColorProvider* provider,
                      const ColorProviderManager::Key& key) {
+
+#if defined(GOOROOM_BUILD)
+  // if there is a url in command line, check the url is trust to determine the
+  // mode whether trust or not.
+  // ===========================================================================
+  // Test whether there is a url in command line.
+  base::CommandLine* cmd = base::CommandLine::ForCurrentProcess();
+  const base::CommandLine::StringVector argv = cmd->argv();
+
+  base::FilePath home_path_dir;
+  base::PathService::Get(base::DIR_HOME, &home_path_dir);
+  std::string trust_user_data_dir_option =
+      "--user-data-dir=" + home_path_dir.AsUTF8Unsafe() +
+      "/.config/gooroom/trust";
+  bool isTrustMode = false;
+  for (base::CommandLine::StringVector::const_iterator it = argv.begin();
+     it != argv.end(); ++it) {
+       std::string command = *it;
+       if (command.find("--user-data-dir") != std::string::npos) {
+         if(command == trust_user_data_dir_option)
+           isTrustMode = true;
+         else
+           isTrustMode = false;
+         break;
+       }
+  }
+  const SkColor kDefaultColorFrameUntrust = SkColorSetRGB(0xb2, 0x2f, 0x00);
+  const SkColor kDefaultColorFrameTrust = SkColorSetRGB(0x00, 0x60, 0xb5);
+
+  const SkColor kDefaultColorFrameInactiveUntrust = SkColorSetRGB(0x93, 0x27, 0x00);
+  const SkColor kDefaultColorFrameInactiveTrust = SkColorSetRGB(0x00, 0x51, 0x99);
+  /*
+  if (base::GetGooroomBase()->isTrustMode()) {
+      isTrustMode = true;
+  }
+  else {
+      isTrustMode = false;
+  }*/
+#endif
+
   const bool dark_mode =
       key.color_mode == ColorProviderManager::ColorMode::kDark;
 
@@ -59,11 +103,10 @@ void AddUiColorMixer(ColorProvider* provider,
   mixer[kColorDropdownForegroundSelected] = {kColorPrimaryForeground};
   mixer[kColorFocusableBorderFocused] = {kColorItemHighlight};
   mixer[kColorFocusableBorderUnfocused] = {kColorMidground};
-  mixer[kColorFrameActive] = {kColorFrameActiveUnthemed};
+  mixer[kColorFrameActive] = {isTrustMode ? kDefaultColorFrameTrust : kDefaultColorFrameUntrust};
   mixer[kColorFrameActiveUnthemed] = {
       dark_mode ? gfx::kGoogleGrey900 : SkColorSetRGB(0xDE, 0xE1, 0xE6)};
-  mixer[kColorFrameInactive] = {dark_mode ? gfx::kGoogleGrey800
-                                          : gfx::kGoogleGrey200};
+  mixer[kColorFrameInactive] = {isTrustMode ? kDefaultColorFrameInactiveTrust : kDefaultColorFrameInactiveUntrust};
   mixer[kColorHelpIconActive] = {kColorPrimaryForeground};
   mixer[kColorHelpIconInactive] = {kColorSecondaryForeground};
   mixer[kColorIcon] = {kColorSecondaryForeground};
-- 
2.30.2

