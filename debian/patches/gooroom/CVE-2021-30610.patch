From 41dfe7098df6c4ab5f768b88bc11c48a87d67877 Mon Sep 17 00:00:00 2001
From: Jana Grill <janagrill@google.com>
Date: Thu, 9 Sep 2021 09:11:23 +0000
Subject: [PATCH] Remove thread hopping in TCPSocket

Now that AsyncSocketApiFunction (the only caller) does everything on
the UI thread, this isn't needed anymore.

M90-LTS: Resolved conflicts in:
- extensions/browser/api/socket/tcp_socket.h
- extensions/browser/api/socket/tcp_socket.cc

(cherry picked from commit defbc65d8ad8e20cf5cebfd7b70c235d79f4b304)

Bug: 1200440
Change-Id: I3a3a9231139c45397ef0e14bd4e0037d3c3a249e
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2929037
Commit-Queue: Nicolas Ouellet-Payeur <nicolaso@chromium.org>
Reviewed-by: Reilly Grant <reillyg@chromium.org>
Cr-Original-Commit-Position: refs/heads/master@{#888465}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3147710
Commit-Queue: Jana Grill <janagrill@google.com>
Reviewed-by: Artem Sumaneev <asumaneev@google.com>
Owners-Override: Artem Sumaneev <asumaneev@google.com>
Cr-Commit-Position: refs/branch-heads/4430@{#1589}
Cr-Branched-From: e5ce7dc4f7518237b3d9bb93cccca35d25216cbe-refs/heads/master@{#857950}
---
 extensions/browser/api/socket/tcp_socket.cc | 126 ++++----------------
 extensions/browser/api/socket/tcp_socket.h  |  37 +-----
 2 files changed, 27 insertions(+), 136 deletions(-)

diff --git a/extensions/browser/api/socket/tcp_socket.cc b/extensions/browser/api/socket/tcp_socket.cc
index 139bc8a71..c4b3517ac 100644
--- a/extensions/browser/api/socket/tcp_socket.cc
+++ b/extensions/browser/api/socket/tcp_socket.cc
@@ -85,8 +85,7 @@ TCPSocket::TCPSocket(content::BrowserContext* browser_context,
     : Socket(owner_extension_id),
       browser_context_(browser_context),
       socket_mode_(UNKNOWN),
-      mojo_data_pump_(nullptr),
-      task_runner_(base::SequencedTaskRunnerHandle::Get()) {}
+      mojo_data_pump_(nullptr) {}
 
 TCPSocket::TCPSocket(
     mojo::PendingRemote<network::mojom::TCPConnectedSocket> socket,
@@ -100,7 +99,6 @@ TCPSocket::TCPSocket(
       client_socket_(std::move(socket)),
       mojo_data_pump_(std::make_unique<MojoDataPump>(std::move(receive_stream),
                                                      std::move(send_stream))),
-      task_runner_(base::SequencedTaskRunnerHandle::Get()),
       peer_addr_(remote_addr) {
   is_connected_ = true;
 }
@@ -111,6 +109,7 @@ TCPSocket::~TCPSocket() {
 
 void TCPSocket::Connect(const net::AddressList& address,
                         net::CompletionOnceCallback callback) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   DCHECK(callback);
 
   if (socket_mode_ == SERVER || connect_callback_) {
@@ -127,22 +126,20 @@ void TCPSocket::Connect(const net::AddressList& address,
   socket_mode_ = CLIENT;
   connect_callback_ = std::move(callback);
 
-  // |completion_callback| is called on current thread.
   network::mojom::NetworkContext::CreateTCPConnectedSocketCallback
       completion_callback = base::BindOnce(&TCPSocket::OnConnectComplete,
                                            weak_factory_.GetWeakPtr());
 
-  // |completion_callback_ui| is called on the UI thread.
-  network::mojom::NetworkContext::CreateTCPConnectedSocketCallback
-      completion_callback_ui =
-          base::BindOnce(&TCPSocket::OnConnectCompleteOnUIThread, task_runner_,
-                         std::move(completion_callback));
-
-  content::GetUIThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&TCPSocket::ConnectOnUIThread,
-                                storage_partition_, browser_context_, address,
-                                client_socket_.BindNewPipeAndPassReceiver(),
-                                std::move(completion_callback_ui)));
+  if (!storage_partition_) {
+    storage_partition_ =
+        content::BrowserContext::GetDefaultStoragePartition(browser_context_);
+  }
+  storage_partition_->GetNetworkContext()->CreateTCPConnectedSocket(
+      base::nullopt, address, /*options=*/nullptr,
+      net::MutableNetworkTrafficAnnotationTag(
+          Socket::GetNetworkTrafficAnnotationTag()),
+      client_socket_.BindNewPipeAndPassReceiver(),
+      /*oberserver=*/mojo::NullRemote(), std::move(completion_callback));
 }
 
 void TCPSocket::Disconnect(bool socket_destroying) {
@@ -231,6 +228,7 @@ void TCPSocket::Listen(const std::string& address,
                        uint16_t port,
                        int backlog,
                        ListenCallback callback) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   DCHECK(!server_socket_);
   DCHECK(!client_socket_);
   DCHECK(!listen_callback_);
@@ -256,18 +254,16 @@ void TCPSocket::Listen(const std::string& address,
       completion_callback = base::BindOnce(&TCPSocket::OnListenComplete,
                                            weak_factory_.GetWeakPtr());
 
-  // |completion_callback_ui| is called on the UI thread.
-  network::mojom::NetworkContext::CreateTCPServerSocketCallback
-      completion_callback_ui =
-          base::BindOnce(&TCPSocket::OnListenCompleteOnUIThread, task_runner_,
-                         std::move(completion_callback));
-
-  content::GetUIThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(&TCPSocket::ListenOnUIThread, storage_partition_,
-                     browser_context_, ip_end_point, backlog,
-                     server_socket_.BindNewPipeAndPassReceiver(),
-                     std::move(completion_callback_ui)));
+  if (!storage_partition_) {
+    storage_partition_ =
+        content::BrowserContext::GetDefaultStoragePartition(browser_context_);
+  }
+  storage_partition_->GetNetworkContext()->CreateTCPServerSocket(
+      ip_end_point, backlog,
+      net::MutableNetworkTrafficAnnotationTag(
+          Socket::GetNetworkTrafficAnnotationTag()),
+      server_socket_.BindNewPipeAndPassReceiver(),
+      std::move(completion_callback));
 }
 
 void TCPSocket::Accept(AcceptCompletionCallback callback) {
@@ -325,54 +321,15 @@ int TCPSocket::WriteImpl(net::IOBuffer* io_buffer,
   return net::ERR_IO_PENDING;
 }
 
-// static
-void TCPSocket::ConnectOnUIThread(
-    content::StoragePartition* storage_partition,
-    content::BrowserContext* browser_context,
-    const net::AddressList& remote_addr_list,
-    mojo::PendingReceiver<network::mojom::TCPConnectedSocket> receiver,
-    network::mojom::NetworkContext::CreateTCPConnectedSocketCallback
-        completion_callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  if (!storage_partition) {
-    storage_partition =
-        content::BrowserContext::GetDefaultStoragePartition(browser_context);
-  }
-  storage_partition->GetNetworkContext()->CreateTCPConnectedSocket(
-      base::nullopt, remote_addr_list, nullptr /* options */,
-      net::MutableNetworkTrafficAnnotationTag(
-          Socket::GetNetworkTrafficAnnotationTag()),
-      std::move(receiver), mojo::NullRemote() /* observer */,
-      std::move(completion_callback));
-}
-
-// static
-void TCPSocket::OnConnectCompleteOnUIThread(
-    scoped_refptr<base::SequencedTaskRunner> original_task_runner,
-    network::mojom::NetworkContext::CreateTCPConnectedSocketCallback callback,
-    int result,
-    const base::Optional<net::IPEndPoint>& local_addr,
-    const base::Optional<net::IPEndPoint>& peer_addr,
-    mojo::ScopedDataPipeConsumerHandle receive_stream,
-    mojo::ScopedDataPipeProducerHandle send_stream) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  original_task_runner->PostTask(
-      FROM_HERE,
-      base::BindOnce(std::move(callback), result, local_addr, peer_addr,
-                     std::move(receive_stream), std::move(send_stream)));
-}
-
 void TCPSocket::OnConnectComplete(
     int result,
     const base::Optional<net::IPEndPoint>& local_addr,
     const base::Optional<net::IPEndPoint>& peer_addr,
     mojo::ScopedDataPipeConsumerHandle receive_stream,
     mojo::ScopedDataPipeProducerHandle send_stream) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   DCHECK(!is_connected_);
   DCHECK(connect_callback_);
-  DCHECK(task_runner_->RunsTasksInCurrentSequence());
 
   if (result == net::OK) {
     is_connected_ = true;
@@ -384,43 +341,10 @@ void TCPSocket::OnConnectComplete(
   std::move(connect_callback_).Run(result);
 }
 
-// static
-void TCPSocket::ListenOnUIThread(
-    content::StoragePartition* storage_partition,
-    content::BrowserContext* browser_context,
-    const net::IPEndPoint& local_addr,
-    int backlog,
-    mojo::PendingReceiver<network::mojom::TCPServerSocket> receiver,
-    network::mojom::NetworkContext::CreateTCPServerSocketCallback callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  if (!storage_partition) {
-    storage_partition =
-        content::BrowserContext::GetDefaultStoragePartition(browser_context);
-  }
-  storage_partition->GetNetworkContext()->CreateTCPServerSocket(
-      local_addr, backlog,
-      net::MutableNetworkTrafficAnnotationTag(
-          Socket::GetNetworkTrafficAnnotationTag()),
-      std::move(receiver), std::move(callback));
-}
-
-// static
-void TCPSocket::OnListenCompleteOnUIThread(
-    const scoped_refptr<base::SequencedTaskRunner>& original_task_runner,
-    network::mojom::NetworkContext::CreateTCPServerSocketCallback callback,
-    int result,
-    const base::Optional<net::IPEndPoint>& local_addr) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  original_task_runner->PostTask(
-      FROM_HERE, base::BindOnce(std::move(callback), result, local_addr));
-}
-
 void TCPSocket::OnListenComplete(
     int result,
     const base::Optional<net::IPEndPoint>& local_addr) {
-  DCHECK(task_runner_->RunsTasksInCurrentSequence());
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   DCHECK(listen_callback_);
 
   if (result != net::OK) {
diff --git a/extensions/browser/api/socket/tcp_socket.h b/extensions/browser/api/socket/tcp_socket.h
index 4f71a0819..0394fd3a1 100644
--- a/extensions/browser/api/socket/tcp_socket.h
+++ b/extensions/browser/api/socket/tcp_socket.h
@@ -99,45 +99,14 @@ class TCPSocket : public Socket {
                 net::CompletionOnceCallback callback) override;
 
  private:
-  // Connects a client TCP socket. This is done on the UI thread because
-  // StoragePartition::GetNetworkContext() needs to happen on the UI thread.
-  // The completion callback is posted back to the thread on which |this| lives.
-  static void ConnectOnUIThread(
-      content::StoragePartition* storage_partition,
-      content::BrowserContext* browser_context,
-      const net::AddressList& remote_address_list,
-      mojo::PendingReceiver<network::mojom::TCPConnectedSocket> receiver,
-      network::mojom::NetworkContext::CreateTCPConnectedSocketCallback
-          callback);
-  static void OnConnectCompleteOnUIThread(
-      scoped_refptr<base::SequencedTaskRunner> original_task_runner,
-      network::mojom::NetworkContext::CreateTCPConnectedSocketCallback callback,
-      int result,
-      const base::Optional<net::IPEndPoint>& local_addr,
-      const base::Optional<net::IPEndPoint>& peer_addr,
-      mojo::ScopedDataPipeConsumerHandle receive_stream,
-      mojo::ScopedDataPipeProducerHandle send_stream);
+  // Connects a client TCP socket.
   void OnConnectComplete(int result,
                          const base::Optional<net::IPEndPoint>& local_addr,
                          const base::Optional<net::IPEndPoint>& peer_addr,
                          mojo::ScopedDataPipeConsumerHandle receive_stream,
                          mojo::ScopedDataPipeProducerHandle send_stream);
 
-  // Connects a server TCP socket. This is done on the UI thread because
-  // StoragePartition::GetNetworkContext() needs to happen on the UI thread.
-  // The completion callback is posted back to the thread on which |this| lives.
-  static void ListenOnUIThread(
-      content::StoragePartition* storage_partition,
-      content::BrowserContext* browser_context,
-      const net::IPEndPoint& local_addr,
-      int backlog,
-      mojo::PendingReceiver<network::mojom::TCPServerSocket> receiver,
-      network::mojom::NetworkContext::CreateTCPServerSocketCallback callback);
-  static void OnListenCompleteOnUIThread(
-      const scoped_refptr<base::SequencedTaskRunner>& original_task_runner,
-      network::mojom::NetworkContext::CreateTCPServerSocketCallback callback,
-      int result,
-      const base::Optional<net::IPEndPoint>& local_addr);
+  // Connects a server TCP socket.
   void OnListenComplete(int result,
                         const base::Optional<net::IPEndPoint>& local_addr);
   void OnAccept(
@@ -184,8 +153,6 @@ class TCPSocket : public Socket {
 
   std::unique_ptr<MojoDataPump> mojo_data_pump_;
 
-  scoped_refptr<base::SequencedTaskRunner> task_runner_;
-
   base::Optional<net::IPEndPoint> local_addr_;
   base::Optional<net::IPEndPoint> peer_addr_;
 
-- 
2.20.1

