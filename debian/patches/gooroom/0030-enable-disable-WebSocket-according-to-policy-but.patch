From e1faee63f07878299e5ee41ab00a196de8271fdb Mon Sep 17 00:00:00 2001
From: junsungc <junsungc@gooroom.kr>
Date: Thu, 23 Jul 2020 18:11:31 +0900
Subject: [PATCH 30/88] enable/disable WebSocket  according to policy, but, 
 need a patch to fix an error when scrolling

---
 .../browser/chrome_content_browser_client.cc  |  2 +
 .../common/common_param_traits_macros.h       |  5 +++
 content/public/common/web_preferences.cc      |  4 ++
 content/public/common/web_preferences.h       |  5 +++
 content/renderer/render_view_impl.cc          | 14 +++++++
 gooroom/BUILD.gn                              |  4 ++
 gooroom/WebKit/gooroom_enabled_features.cc    |  8 ++++
 gooroom/WebKit/gooroom_enabled_features.h     | 25 +++++++++++
 gooroom/browser/gooroom_pref.cc               | 33 ++++++++++++++-
 gooroom/browser/gooroom_pref.h                | 11 +++--
 gooroom/content/gooroom_safety_policy_part.cc | 34 +++++++++++++++
 gooroom/content/gooroom_safety_policy_part.h  | 24 +++++++++++
 .../public/platform/web_runtime_features.h    |  5 +++
 .../modules/websockets/dom_websocket.cc       | 42 +++++++++++++++++++
 third_party/blink/renderer/platform/BUILD.gn  |  6 +++
 .../platform/exported/web_runtime_features.cc | 14 +++++++
 16 files changed, 228 insertions(+), 8 deletions(-)
 create mode 100644 gooroom/WebKit/gooroom_enabled_features.cc
 create mode 100644 gooroom/WebKit/gooroom_enabled_features.h
 create mode 100644 gooroom/content/gooroom_safety_policy_part.cc
 create mode 100644 gooroom/content/gooroom_safety_policy_part.h

diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index f9f00d5039a2..925194aea3b8 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -11,6 +11,7 @@
 
 #if BUILDFLAG(ENABLE_GOOROOM)
 #include "gooroom/URLRewrite/gooroom_url_rewrite.h"
+#include "gooroom/content/gooroom_safety_policy_part.h"
 #endif
 
 #include "base/base_switches.h"
@@ -1163,6 +1164,7 @@ ChromeContentBrowserClient::ChromeContentBrowserClient(
 
 #if BUILDFLAG(ENABLE_GOOROOM)
   extra_parts_.push_back(new GooroomURLRewrite);
+  extra_parts_.push_back(new content::GooroomSafetyPolicyPart);
 #endif
 }
 
diff --git a/content/public/common/common_param_traits_macros.h b/content/public/common/common_param_traits_macros.h
index 0e67ad3c7431..98966f6bd8e0 100644
--- a/content/public/common/common_param_traits_macros.h
+++ b/content/public/common/common_param_traits_macros.h
@@ -92,7 +92,12 @@ IPC_STRUCT_TRAITS_BEGIN(content::Referrer)
   IPC_STRUCT_TRAITS_MEMBER(policy)
 IPC_STRUCT_TRAITS_END()
 
+
 IPC_STRUCT_TRAITS_BEGIN(content::WebPreferences)
+#if defined(GOOROOM_BUILD)
+  IPC_STRUCT_TRAITS_MEMBER(websocket_enabled)
+  IPC_STRUCT_TRAITS_MEMBER(webworker_enabled)
+#endif
   IPC_STRUCT_TRAITS_MEMBER(standard_font_family_map)
   IPC_STRUCT_TRAITS_MEMBER(fixed_font_family_map)
   IPC_STRUCT_TRAITS_MEMBER(serif_font_family_map)
diff --git a/content/public/common/web_preferences.cc b/content/public/common/web_preferences.cc
index 13999e87c780..0a852734874c 100644
--- a/content/public/common/web_preferences.cc
+++ b/content/public/common/web_preferences.cc
@@ -223,6 +223,10 @@ WebPreferences::WebPreferences()
       presentation_receiver(false),
       media_controls_enabled(true),
       do_not_update_selection_on_mutating_selection_range(false),
+#if defined(GOOROOM_BUILD)
+      websocket_enabled(true),
+      webworker_enabled(true),
+#endif
       autoplay_policy(AutoplayPolicy::kDocumentUserActivationRequired),
       preferred_color_scheme(blink::PreferredColorScheme::kNoPreference),
       low_priority_iframes_threshold(net::EFFECTIVE_CONNECTION_TYPE_UNKNOWN),
diff --git a/content/public/common/web_preferences.h b/content/public/common/web_preferences.h
index 6c6420ec70bf..885dd17ea889 100644
--- a/content/public/common/web_preferences.h
+++ b/content/public/common/web_preferences.h
@@ -312,6 +312,11 @@ struct CONTENT_EXPORT WebPreferences {
   // TODO(changwan): remove this once we no longer support Android N.
   bool do_not_update_selection_on_mutating_selection_range;
 
+#if defined(GOOROOM_BUILD)
+  bool websocket_enabled;
+  bool webworker_enabled;
+#endif
+
   // Defines the current autoplay policy.
   AutoplayPolicy autoplay_policy;
 
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
index f0cb4833442b..bb63f362c8ba 100644
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -962,6 +962,20 @@ void RenderView::ApplyWebPreferences(const WebPreferences& prefs,
     NOTREACHED();
   }
 
+#if defined(GOOROOM_BUILD)
+  if (prefs.websocket_enabled) {
+    WebRuntimeFeatures::EnableWebSocket(true);
+  } else {
+    WebRuntimeFeatures::EnableWebSocket(false);
+  }
+
+  if (!prefs.webworker_enabled) {
+    WebRuntimeFeatures::EnableWebWorker(false);
+  } else {
+    WebRuntimeFeatures::EnableWebWorker(true);
+  }
+#endif
+
 #if defined(OS_MACOSX)
   web_view->SetMaximumLegibleScale(prefs.default_maximum_page_scale_factor);
 #endif
diff --git a/gooroom/BUILD.gn b/gooroom/BUILD.gn
index 328b983e37f1..107458ed6843 100644
--- a/gooroom/BUILD.gn
+++ b/gooroom/BUILD.gn
@@ -252,6 +252,10 @@ if (!is_android && !is_mac) {
         # for commit #14
         "URLRewrite/gooroom_url_rewrite.cc",
         "URLRewrite/gooroom_url_rewrite.h",
+
+        # for commit #18
+        "content/gooroom_safety_policy_part.cc",
+        "content/gooroom_safety_policy_part.h",
       ]
     }
   }
diff --git a/gooroom/WebKit/gooroom_enabled_features.cc b/gooroom/WebKit/gooroom_enabled_features.cc
new file mode 100644
index 000000000000..0c4ffa487fc5
--- /dev/null
+++ b/gooroom/WebKit/gooroom_enabled_features.cc
@@ -0,0 +1,8 @@
+#include "../WebKit/gooroom_enabled_features.h"
+
+namespace blink {
+
+bool GooroomEnabledFeatures::isWebSocketEnabled = false;
+bool GooroomEnabledFeatures::isWebWorkerEnabled = false;
+
+} // end of content namespace
diff --git a/gooroom/WebKit/gooroom_enabled_features.h b/gooroom/WebKit/gooroom_enabled_features.h
new file mode 100644
index 000000000000..70b4f9f59f35
--- /dev/null
+++ b/gooroom/WebKit/gooroom_enabled_features.h
@@ -0,0 +1,25 @@
+#ifndef GOOROOM_ENABLED_FEATURES_H_
+#define GOOROOM_ENABLED_FEATURES_H_
+
+#include "third_party/blink/renderer/platform/platform_export.h"
+#include "third_party/blink/renderer/platform/wtf/allocator/allocator.h"
+
+namespace blink {
+
+class PLATFORM_EXPORT GooroomEnabledFeatures {
+  STATIC_ONLY(GooroomEnabledFeatures);
+ public:
+  static void SetWebSocketEnabled(bool isEnabled) { isWebSocketEnabled = isEnabled; }
+  static bool WebSocketEnabled() { return isWebSocketEnabled; }
+
+  static void SetWebWorkerEnabled(bool isEnabled) { isWebWorkerEnabled = isEnabled; }
+  static bool WebWorkerEnabled() { return isWebWorkerEnabled; }
+
+ private:
+  static bool isWebSocketEnabled;
+  static bool isWebWorkerEnabled;
+};
+
+} // end of blink namespace
+
+#endif /* GOOROOM_ENABLED_FEATURES_H_ */
diff --git a/gooroom/browser/gooroom_pref.cc b/gooroom/browser/gooroom_pref.cc
index 22ed4a438c54..ae91b7f036be 100644
--- a/gooroom/browser/gooroom_pref.cc
+++ b/gooroom/browser/gooroom_pref.cc
@@ -40,8 +40,8 @@ void GooroomPref::setup() {
   base::FilePath path("/usr/share/gooroom/browser/policies/mainpref.json");
 
   PrefRegistrySimple* registry = new PrefRegistrySimple;
-  registry->RegisterBooleanPref(kPolicyGooroomWebsocket, false);
-  registry->RegisterBooleanPref(kPolicyGooroomWebworker, false);
+  registry->RegisterBooleanPref(kPolicyGooroomWebSocket, false);
+  registry->RegisterBooleanPref(kPolicyGooroomWebWorker, false);
   registry->RegisterListPref(kPolicyGooroomWhiteList);
 
   PrefServiceFactory prefServiceFactory;
@@ -138,4 +138,33 @@ void GooroomPref::setup() {
   // test args
 }
 
+bool GooroomPref::useWebSocket() {
+  if(base::GetGooroomBase()->isTrustMode()) {
+    return true;
+  }
+
+  const PrefService::Preference* p =
+      pref()->FindPreference(gooroom::kPolicyGooroomWebSocket);
+  bool val = true;
+  if (p != nullptr)
+    p->GetValue()->GetAsBoolean(&val);
+
+  DLOG(INFO) << "GooroomPref::useWebSocket() : " << val;
+  return val;
+}
+
+bool GooroomPref::useWebWorker() {
+  if(base::GetGooroomBase()->isTrustMode())
+    return true;
+
+  const PrefService::Preference* p =
+      pref()->FindPreference(gooroom::kPolicyGooroomWebWorker);
+  bool val = true;
+  if (p != nullptr)
+    p->GetValue()->GetAsBoolean(&val);
+
+  DLOG(INFO) << "GooroomPref::useWebWorker() : " << val;
+  return val;
+}
+
 }  // namespace gooroom
diff --git a/gooroom/browser/gooroom_pref.h b/gooroom/browser/gooroom_pref.h
index 3e94b7fb6b22..44d63d22bf83 100644
--- a/gooroom/browser/gooroom_pref.h
+++ b/gooroom/browser/gooroom_pref.h
@@ -15,13 +15,9 @@ namespace gooroom {
 /** whitelist policy */
 const char kPolicyGooroomWhiteList[] = "gooroom.policy.whitelist";
 /** websocket confirm policy */
-const char kPolicyGooroomWebsocket[] = "gooroom.policy.websocket";
+const char kPolicyGooroomWebSocket[] = "gooroom.policy.websocket";
 /** webworker confirm policy */
-const char kPolicyGooroomWebworker[] = "gooroom.policy.webworker";
-/** websocket confirm enable/disable */
-const char kGooroomWebsocketConfirm[] = "gooroom.websocket.confirm";
-/** webwork confirm enable/disable */
-const char kGooroomWebworkerConfirm[] = "gooroom.webworker.confirm";
+const char kPolicyGooroomWebWorker[] = "gooroom.policy.webworker";
 
 class GooroomPref {
  public:
@@ -31,6 +27,9 @@ class GooroomPref {
   PrefService* pref();
   void setup();
 
+  bool useWebSocket();
+  bool useWebWorker();
+
  private:
   std::unique_ptr<PrefService> pref_;
 };
diff --git a/gooroom/content/gooroom_safety_policy_part.cc b/gooroom/content/gooroom_safety_policy_part.cc
new file mode 100644
index 000000000000..113fb359a53e
--- /dev/null
+++ b/gooroom/content/gooroom_safety_policy_part.cc
@@ -0,0 +1,34 @@
+#include "gooroom_safety_policy_part.h"
+
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/common/web_preferences.h"
+#include "gooroom/browser/gooroom_pref.h"
+
+namespace content {
+
+GooroomSafetyPolicyPart::GooroomSafetyPolicyPart() {}
+GooroomSafetyPolicyPart::~GooroomSafetyPolicyPart() {}
+
+void GooroomSafetyPolicyPart::OverrideWebkitPrefs(
+    content::RenderViewHost* rvh,
+    content::WebPreferences* web_prefs) {
+
+  if (gooroom::g_gooroom->useWebSocket()) {
+    web_prefs->websocket_enabled = true;
+  } else {
+    web_prefs->websocket_enabled = false;
+  }
+
+  if (gooroom::g_gooroom->useWebWorker()) {
+    web_prefs->webworker_enabled = true;
+  } else {
+    web_prefs->webworker_enabled = false;
+  }
+
+  return;
+}
+
+}  // namespace content
diff --git a/gooroom/content/gooroom_safety_policy_part.h b/gooroom/content/gooroom_safety_policy_part.h
new file mode 100644
index 000000000000..00f320e8bb69
--- /dev/null
+++ b/gooroom/content/gooroom_safety_policy_part.h
@@ -0,0 +1,24 @@
+#ifndef GOOROOM_SAFETY_POLICY_PART_H_
+#define GOOROOM_SAFETY_POLICY_PART_H_
+
+#include "chrome/browser/chrome_content_browser_client_parts.h"
+
+namespace content {
+
+class RenderViewHost;
+struct WebPreferences;
+
+// Implements a Gooroom specific part of ChromeContentBrowserClient.
+class GooroomSafetyPolicyPart : public ChromeContentBrowserClientParts {
+ public:
+	GooroomSafetyPolicyPart();
+  ~GooroomSafetyPolicyPart() override;
+
+  void OverrideWebkitPrefs(content::RenderViewHost *rvh,
+                           content::WebPreferences *web_prefs) override;
+};
+
+} // end of content namespace
+
+#endif  // GOOROOM_SAFETY_POLICY_PART_H_
+
diff --git a/third_party/blink/public/platform/web_runtime_features.h b/third_party/blink/public/platform/web_runtime_features.h
index 56d2da4d9abc..b65fcedd33e2 100644
--- a/third_party/blink/public/platform/web_runtime_features.h
+++ b/third_party/blink/public/platform/web_runtime_features.h
@@ -41,6 +41,11 @@ namespace blink {
 // Stable features are enabled by default.
 class WebRuntimeFeatures {
  public:
+#if defined(GOOROOM_BUILD)
+  BLINK_PLATFORM_EXPORT static void EnableWebSocket(bool);
+  BLINK_PLATFORM_EXPORT static void EnableWebWorker(bool);
+#endif
+
   // Enable or disable features with status=experimental listed in
   // Source/platform/runtime_enabled_features.json5.
   BLINK_PLATFORM_EXPORT static void EnableExperimentalFeatures(bool);
diff --git a/third_party/blink/renderer/modules/websockets/dom_websocket.cc b/third_party/blink/renderer/modules/websockets/dom_websocket.cc
index 7cc63e5d1bae..6b4202040206 100644
--- a/third_party/blink/renderer/modules/websockets/dom_websocket.cc
+++ b/third_party/blink/renderer/modules/websockets/dom_websocket.cc
@@ -30,6 +30,19 @@
 
 #include "third_party/blink/renderer/modules/websockets/dom_websocket.h"
 
+#if defined(GOOROOM_BUILD)
+#include "base/syslog_logging.h"
+#include "chrome/grit/generated_resources.h"
+#include "third_party/blink/renderer/core/page/chrome_client.h"
+#include "third_party/blink/renderer/core/page/page.h"
+#include "third_party/blink/renderer/core/frame/local_dom_window.h"
+#include "ui/base/l10n/l10n_util.h"
+#include "url/gurl.h"
+
+#include "gooroom/WebKit/gooroom_enabled_features.h"
+#include "gooroom/base/gooroom_base.h"
+#endif
+
 #include <string>
 #include <utility>
 
@@ -257,6 +270,35 @@ void DOMWebSocket::Connect(const String& url,
   auto result = common_.Connect(GetExecutionContext(), url, protocols, channel_,
                                 exception_state);
 
+#if defined(GOOROOM_BUILD)
+  /*
+    // FIXME : errors, find another route to access or create WebSocket
+    whitelist base::GooroomUrlFilter* pFilter =
+    base::GetGooroomBase()->getUrlFilter(); GURL gurl_(url.Utf8().data()); bool
+    trusted = pFilter->isTrustUrl(gurl_.spec());
+  */
+
+  // url has scheme "wss://" (e.g., wss://echo.websocket.org?encoding=text)
+  // printf("Requested WebSocket : %s \n", gurl_.spec().data());
+
+  if (!GooroomEnabledFeatures::WebSocketEnabled()) {
+    SYSLOG(INFO) << "Using WebSocket is not permitted";
+    exception_state.ThrowDOMException(DOMExceptionCode::kInvalidAccessError,
+                                      "Using WebSocket is not permitted");
+
+    LocalFrame* frm = GetExecutionContext()->ExecutingWindow()->GetFrame();
+    Page* page = frm->GetPage();
+    // FIXME : care character encoding
+    page->GetChromeClient().OpenJavaScriptConfirm(frm, WTF::String::FromUTF8("정책에 의해 외부 연결 시도가 차단되었습니다."));
+    //page->GetChromeClient().OpenJavaScriptAlert(
+    //    frm, "External connection attempts were blocked by policy.");
+ 
+
+    ReleaseChannel();
+    return;
+  }
+#endif
+
   switch (result) {
     case WebSocketCommon::ConnectResult::kSuccess:
       DCHECK(!exception_state.HadException());
diff --git a/third_party/blink/renderer/platform/BUILD.gn b/third_party/blink/renderer/platform/BUILD.gn
index 6658b51a7d0d..603b57c81bf5 100644
--- a/third_party/blink/renderer/platform/BUILD.gn
+++ b/third_party/blink/renderer/platform/BUILD.gn
@@ -1457,6 +1457,12 @@ jumbo_component("platform") {
     "windows_keyboard_codes.h",
   ]
 
+  if (is_gooroom) {
+    sources += [
+      "//gooroom/WebKit/gooroom_enabled_features.cc",
+    ]
+  }
+
   sources -= blink_platform_avx_files
 
   # Add in the generated files.
diff --git a/third_party/blink/renderer/platform/exported/web_runtime_features.cc b/third_party/blink/renderer/platform/exported/web_runtime_features.cc
index 8eae6d433574..8cda577a6526 100644
--- a/third_party/blink/renderer/platform/exported/web_runtime_features.cc
+++ b/third_party/blink/renderer/platform/exported/web_runtime_features.cc
@@ -34,6 +34,10 @@
 #include "third_party/blink/renderer/platform/runtime_enabled_features.h"
 #include "third_party/blink/renderer/platform/wtf/assertions.h"
 
+#if defined(GOOROOM_BUILD)
+#include "gooroom/WebKit/gooroom_enabled_features.h"
+#endif
+
 namespace blink {
 
 void WebRuntimeFeatures::EnableBlockingFocusWithoutUserActivation(bool enable) {
@@ -577,6 +581,16 @@ void WebRuntimeFeatures::EnableDisplayCutoutAPI(bool enable) {
   RuntimeEnabledFeatures::SetDisplayCutoutAPIEnabled(enable);
 }
 
+#if defined(GOOROOM_BUILD)
+void WebRuntimeFeatures::EnableWebSocket(bool enable) {
+  GooroomEnabledFeatures::SetWebSocketEnabled(enable);
+}
+
+void WebRuntimeFeatures::EnableWebWorker(bool enable) {
+  GooroomEnabledFeatures::SetWebWorkerEnabled(enable);
+}
+#endif
+
 void WebRuntimeFeatures::EnableDocumentPolicy(bool enable) {
   RuntimeEnabledFeatures::SetDocumentPolicyEnabled(enable);
 }
-- 
2.20.1

