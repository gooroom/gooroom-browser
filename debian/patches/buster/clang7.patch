description: disable flags that are introduced after clang 7
author: Michael Gilbert <mgilbert@debian.org>

--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -129,7 +129,7 @@ declare_args() {
   #
   # TODO(crbug.com/977230): Enabling this when 'use_xcode_clang' is true may
   # call an old clang that doesn't support auto-init.
-  init_stack_vars = !is_android && !use_xcode_clang
+  init_stack_vars = false
 
   # This argument is to control whether enabling text section splitting in the
   # final binary. When enabled, the separated text sections with prefix
@@ -704,7 +704,7 @@ config("compiler") {
   # present. On Android this increases binary size due to more thinks for long
   # jumps. Turn it off by default and enable selectively for targets where it's
   # beneficial.
-  if (use_lld && !enable_call_graph_profile_sort) {
+  if (false) {
     if (is_win) {
       ldflags += [ "/call-graph-profile-sort:no" ]
     } else if (!is_apple) {
@@ -1514,29 +1514,9 @@ config("default_warnings") {
         # Flags NaCl (Clang 3.7) and Xcode 9.2 (Clang clang-900.0.39.2) do not
         # recognize.
         cflags += [
-          # An ABI compat warning we don't care about, https://crbug.com/1102157
-          # TODO(thakis): Push this to the (few) targets that need it,
-          # instead of having a global flag.
-          "-Wno-psabi",
-
           # Ignore warnings about MSVC optimization pragmas.
           # TODO(thakis): Only for no_chromium_code? http://crbug.com/912662
           "-Wno-ignored-pragma-optimize",
-
-          # TODO(https://crbug.com/989932): Evaluate and possibly enable.
-          "-Wno-implicit-int-float-conversion",
-
-          # TODO(https://crbug.com/999886): Clean up, enable.
-          "-Wno-final-dtor-non-final-class",
-
-          # TODO(https://crbug.com/1016945) Clean up, enable.
-          "-Wno-builtin-assume-aligned-alignment",
-
-          # TODO(https://crbug.com/1028110): Evaluate and possible enable.
-          "-Wno-deprecated-copy",
-
-          # TODO(https://crbug.com/1050281): Clean up, enable.
-          "-Wno-non-c-typedef-for-linkage",
         ]
 
         cflags_c += [
@@ -1549,12 +1529,6 @@ config("default_warnings") {
           "-Wno-implicit-fallthrough",
         ]
 
-        if (enable_wmax_tokens) {
-          cflags += [ "-Wmax-tokens" ]
-        } else {
-          # TODO(https://crbug.com/1049569): Remove after Clang 87b235db.
-          cflags += [ "-Wno-max-tokens" ]
-        }
       }
     }
   }
@@ -1685,7 +1659,7 @@ config("no_chromium_code") {
       # suppressing them individually, we just blanket suppress them here.
       "-Wno-unused-variable",
     ]
-    if (!is_nacl && (current_toolchain == host_toolchain || !use_xcode_clang)) {
+    if (false) {
       cflags += [
         # TODO(https://crbug.com/1031169): Clean up and enable.
         "-Wno-misleading-indentation",
--- a/third_party/blink/renderer/BUILD.gn
+++ b/third_party/blink/renderer/BUILD.gn
@@ -46,14 +46,7 @@ config("inside_blink") {
       "-Wconversion",
       "-Wno-float-conversion",
       "-Wno-sign-conversion",
-      "-Wno-implicit-float-conversion",
-      "-Wno-implicit-int-conversion",
     ]
-
-    if (!is_chromeos_ash ||
-        default_toolchain != "//build/toolchain/cros:target") {
-      cflags += [ "-Wno-enum-float-conversion" ]
-    }
   }
 }
 
--- a/third_party/angle/BUILD.gn
+++ b/third_party/angle/BUILD.gn
@@ -172,7 +172,6 @@ config("extra_warnings") {
     cflags += [
       "-Wbad-function-cast",
       "-Wconditional-uninitialized",
-      "-Wextra-semi-stmt",
       "-Wfloat-conversion",
       "-Winconsistent-missing-destructor-override",
       "-Wmissing-field-initializers",
@@ -194,14 +193,6 @@ config("extra_warnings") {
       "-Wunreachable-code",
       "-Wshorten-64-to-32",
     ]
-    if (!use_xcode_clang) {
-      # Mac catalyst uses a clang version that doesn't have these.
-      cflags += [
-        "-Wdeprecated-copy",
-        "-Wsuggest-destructor-override",
-        "-Wsuggest-override",
-      ]
-    }
   }
 
   if (angle_is_winuwp) {
--- a/third_party/angle/src/compiler/preprocessor/preprocessor.l
+++ b/third_party/angle/src/compiler/preprocessor/preprocessor.l
@@ -50,7 +50,6 @@ IF YOU MODIFY THIS FILE YOU ALSO NEED TO
 #pragma clang diagnostic ignored "-Wunknown-warning-option"
 #endif
 // Flex isn't semi-colon clean.
-#pragma clang diagnostic ignored "-Wextra-semi-stmt"
 #pragma clang diagnostic ignored "-Wunreachable-code"
 #endif
 
--- a/third_party/angle/src/compiler/translator/glslang.l
+++ b/third_party/angle/src/compiler/translator/glslang.l
@@ -46,7 +46,6 @@ WHICH GENERATES THE GLSL ES LEXER (glsla
 #pragma clang diagnostic ignored "-Wunknown-warning-option"
 #endif
 // Flex isn't semi-colon clean.
-#pragma clang diagnostic ignored "-Wextra-semi-stmt"
 #pragma clang diagnostic ignored "-Wunreachable-code"
 #endif
 }
--- a/third_party/angle/src/compiler/preprocessor/preprocessor_lex_autogen.cpp
+++ b/third_party/angle/src/compiler/preprocessor/preprocessor_lex_autogen.cpp
@@ -708,7 +708,6 @@ IF YOU MODIFY THIS FILE YOU ALSO NEED TO
 #        pragma clang diagnostic ignored "-Wunknown-warning-option"
 #    endif
 // Flex isn't semi-colon clean.
-#    pragma clang diagnostic ignored "-Wextra-semi-stmt"
 #    pragma clang diagnostic ignored "-Wunreachable-code"
 #endif
 
--- a/third_party/angle/src/compiler/translator/glslang_lex_autogen.cpp
+++ b/third_party/angle/src/compiler/translator/glslang_lex_autogen.cpp
@@ -31,7 +31,6 @@
 #        pragma clang diagnostic ignored "-Wunknown-warning-option"
 #    endif
 // Flex isn't semi-colon clean.
-#    pragma clang diagnostic ignored "-Wextra-semi-stmt"
 #    pragma clang diagnostic ignored "-Wunreachable-code"
 #endif
 
