From 5e30bdad6a3e1aaa4b9ec58885665649046e0db9 Mon Sep 17 00:00:00 2001
From: Katie Dektar <katie@chromium.org>
Date: Thu, 10 Jun 2021 07:45:07 +0000
Subject: [PATCH 05/28] Check saved web contents before using to open new tab.

This means if the web contents were invalidated or missing, we can
still open the help page for the dialog about showing image
descriptions for unlabeled images, but without using invalid memory.

Also removes outdated TODO and adds a test for
AccessibilityLabelsBubbleModel.

(cherry picked from commit 427728383657e6ccb06dbfcce0c5118bb557c0af)

(cherry picked from commit ac8ca2ab03c64ac1bb06860d9a4d649c043680ad)

Bug: 1212500
Change-Id: I17f0fa6c8a387ff3342c1d95deae5ee991583f5c
AX-Relnotes: N/A
Test: Dialog still opens help menu, even after closing the webcontents that launched the dialog, and new browsertests.
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2917795
Commit-Queue: Katie Dektar <katie@chromium.org>
Reviewed-by: Istiaque Ahmed <lazyboy@chromium.org>
Cr-Original-Original-Commit-Position: refs/heads/master@{#886863}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2936918
Reviewed-by: Avi Drissman <avi@chromium.org>
Cr-Original-Commit-Position: refs/branch-heads/4472@{#1421}
Cr-Original-Branched-From: 3d60439cfb36485e76a1c5bb7f513d3721b20da1-refs/heads/master@{#870763}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2947508
Owners-Override: Victor-Gabriel Savu <vsavu@google.com>
Reviewed-by: Artem Sumaneev <asumaneev@google.com>
Commit-Queue: Victor-Gabriel Savu <vsavu@google.com>
Cr-Commit-Position: refs/branch-heads/4430@{#1516}
Cr-Branched-From: e5ce7dc4f7518237b3d9bb93cccca35d25216cbe-refs/heads/master@{#857950}
---
 .../accessibility_labels_bubble_model.cc      | 18 ++--
 .../accessibility_labels_bubble_model.h       | 14 ++-
 ...ibility_labels_bubble_model_browsertest.cc | 93 +++++++++++++++++++
 chrome/test/BUILD.gn                          |  1 +
 4 files changed, 116 insertions(+), 10 deletions(-)
 create mode 100644 chrome/browser/renderer_context_menu/accessibility_labels_bubble_model_browsertest.cc

diff --git a/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.cc b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.cc
index a5d591122..a7f437d83 100644
--- a/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.cc
+++ b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.cc
@@ -8,6 +8,8 @@
 #include "chrome/browser/accessibility/accessibility_labels_service.h"
 #include "chrome/browser/accessibility/accessibility_labels_service_factory.h"
 #include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
@@ -33,10 +35,10 @@ void RecordModalDialogAccepted(bool accepted) {
 
 AccessibilityLabelsBubbleModel::AccessibilityLabelsBubbleModel(
     Profile* profile,
-    WebContents* web_contents,
+    content::WebContents* web_contents,
     bool enable_always)
-    : profile_(profile),
-      web_contents_(web_contents),
+    : WebContentsObserver(web_contents),
+      profile_(profile),
       enable_always_(enable_always) {}
 
 AccessibilityLabelsBubbleModel::~AccessibilityLabelsBubbleModel() {}
@@ -91,12 +93,16 @@ GURL AccessibilityLabelsBubbleModel::GetHelpPageURL() const {
 }
 
 void AccessibilityLabelsBubbleModel::OpenHelpPage() {
-  // TODO(katie): Link to a specific accessibility labels help page when
-  // there is one; check with the privacy team.
   OpenURLParams params(GetHelpPageURL(), Referrer(),
                        WindowOpenDisposition::NEW_FOREGROUND_TAB,
                        ui::PAGE_TRANSITION_LINK, false);
-  web_contents_->OpenURL(params);
+  if (web_contents()) {
+    web_contents()->OpenURL(params);
+    return;
+  }
+  // The web contents used to open this dialog have been destroyed.
+  Browser* browser = chrome::ScopedTabbedBrowserDisplayer(profile_).browser();
+  browser->OpenURL(params);
 }
 
 void AccessibilityLabelsBubbleModel::SetPref(bool enabled) {
diff --git a/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.h b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.h
index 11480556d..40f493afb 100644
--- a/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.h
+++ b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.h
@@ -7,6 +7,7 @@
 
 #include "base/macros.h"
 #include "chrome/browser/ui/confirm_bubble_model.h"
+#include "content/public/browser/web_contents_observer.h"
 
 class Profile;
 
@@ -16,12 +17,17 @@ class WebContents;
 
 // A class that implements a bubble menu shown when we confirm a user allows
 // integrating the accessibility labels service of Google to Chrome.
-class AccessibilityLabelsBubbleModel : public ConfirmBubbleModel {
+class AccessibilityLabelsBubbleModel : public ConfirmBubbleModel,
+                                       public content::WebContentsObserver {
  public:
   AccessibilityLabelsBubbleModel(Profile* profile,
                                  content::WebContents* web_contents,
                                  bool enable_always);
   ~AccessibilityLabelsBubbleModel() override;
+  AccessibilityLabelsBubbleModel(const AccessibilityLabelsBubbleModel&) =
+      delete;
+  AccessibilityLabelsBubbleModel& operator=(
+      const AccessibilityLabelsBubbleModel&) = delete;
 
   // ConfirmBubbleModel implementation.
   base::string16 GetTitle() const override;
@@ -37,11 +43,11 @@ class AccessibilityLabelsBubbleModel : public ConfirmBubbleModel {
   // Set the profile preferences to enable or disable the feature.
   void SetPref(bool enabled);
 
+  // Unowned.
   Profile* profile_;
-  content::WebContents* web_contents_;
-  bool enable_always_;
 
-  DISALLOW_COPY_AND_ASSIGN(AccessibilityLabelsBubbleModel);
+  // Whether to always enable or just enable once.
+  bool enable_always_;
 };
 
 #endif  // CHROME_BROWSER_RENDERER_CONTEXT_MENU_ACCESSIBILITY_LABELS_BUBBLE_MODEL_H_
diff --git a/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model_browsertest.cc b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model_browsertest.cc
new file mode 100644
index 000000000..55891a86e
--- /dev/null
+++ b/chrome/browser/renderer_context_menu/accessibility_labels_bubble_model_browsertest.cc
@@ -0,0 +1,93 @@
+// Copyright 2021 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_context_menu/accessibility_labels_bubble_model.h"
+
+#include <memory>
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/confirm_bubble.h"
+#include "chrome/browser/ui/tabs/tab_strip_model.h"
+#include "chrome/common/pref_names.h"
+#include "chrome/test/base/in_process_browser_test.h"
+#include "chrome/test/base/ui_test_utils.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/test/browser_test.h"
+#include "content/public/test/test_navigation_observer.h"
+#include "testing/gtest/include/gtest/gtest.h"
+#include "url/gurl.h"
+
+namespace {
+
+// A test class for the accessibility labels bubble.
+class AccessibilityLabelsBubbleModelTest : public InProcessBrowserTest {
+ public:
+  AccessibilityLabelsBubbleModelTest() = default;
+  ~AccessibilityLabelsBubbleModelTest() override = default;
+  AccessibilityLabelsBubbleModelTest(
+      const AccessibilityLabelsBubbleModelTest&) = delete;
+  AccessibilityLabelsBubbleModelTest& operator=(
+      const AccessibilityLabelsBubbleModelTest&) = delete;
+
+  std::unique_ptr<AccessibilityLabelsBubbleModel> CreateConfirmBubble() {
+    content::WebContents* web_contents =
+        browser()->tab_strip_model()->GetActiveWebContents();
+    auto model = std::make_unique<AccessibilityLabelsBubbleModel>(
+        browser()->profile(), web_contents, /*enable_always=*/true);
+    return model;
+  }
+};
+
+}  // namespace
+
+IN_PROC_BROWSER_TEST_F(AccessibilityLabelsBubbleModelTest, ConfirmSetsPref) {
+  browser()->profile()->GetPrefs()->SetBoolean(
+      prefs::kAccessibilityImageLabelsEnabled, false);
+  std::unique_ptr<AccessibilityLabelsBubbleModel> model = CreateConfirmBubble();
+  model->Accept();
+  EXPECT_TRUE(browser()->profile()->GetPrefs()->GetBoolean(
+      prefs::kAccessibilityImageLabelsEnabled));
+}
+
+IN_PROC_BROWSER_TEST_F(AccessibilityLabelsBubbleModelTest,
+                       CancelDoesNotSetPref) {
+  browser()->profile()->GetPrefs()->SetBoolean(
+      prefs::kAccessibilityImageLabelsEnabled, false);
+  std::unique_ptr<AccessibilityLabelsBubbleModel> model = CreateConfirmBubble();
+  model->Cancel();
+  EXPECT_FALSE(browser()->profile()->GetPrefs()->GetBoolean(
+      prefs::kAccessibilityImageLabelsEnabled));
+}
+
+IN_PROC_BROWSER_TEST_F(AccessibilityLabelsBubbleModelTest, OpenHelpPage) {
+  std::unique_ptr<AccessibilityLabelsBubbleModel> model = CreateConfirmBubble();
+  ui_test_utils::AllBrowserTabAddedWaiter waiter;
+  model->OpenHelpPage();
+  content::WebContents* web_contents = waiter.Wait();
+  EXPECT_EQ(web_contents->GetBrowserContext(), browser()->profile());
+  EXPECT_EQ(web_contents->GetURL(), model->GetHelpPageURL());
+}
+
+// Tests that closing the tab with WebContents that was used to construct
+// the AccessibilityLabelsBubbleModel does not cause any problems when
+// opening the Help page.
+// This is a regression test for crbug.com/1212500.
+// Note that we do not need to test what happens when the whole browser
+// closes, because when the last tab in a window closes it will close the
+// bubble widget too.
+IN_PROC_BROWSER_TEST_F(AccessibilityLabelsBubbleModelTest,
+                       OpenHelpPageAfterWebContentsClosed) {
+  // Open a new tab so the whole browser does not close once we close
+  // the tab via WebContents::Close() below.
+  AddTabAtIndex(0, GURL("data:text/html,<p>kittens!</p>"),
+                ui::PAGE_TRANSITION_TYPED);
+  std::unique_ptr<AccessibilityLabelsBubbleModel> model = CreateConfirmBubble();
+  browser()->tab_strip_model()->GetActiveWebContents()->Close();
+  ui_test_utils::AllBrowserTabAddedWaiter waiter;
+  model->OpenHelpPage();
+  content::WebContents* web_contents = waiter.Wait();
+  EXPECT_EQ(web_contents->GetBrowserContext(), browser()->profile());
+  EXPECT_EQ(web_contents->GetURL(), model->GetHelpPageURL());
+}
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 416a58055..7c54b1f8d 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -1318,6 +1318,7 @@ if (!is_android) {
       "../browser/profiles/profile_theme_update_service_browsertest.cc",
       "../browser/push_messaging/push_messaging_browsertest.cc",
       "../browser/referrer_policy_browsertest.cc",
+      "../browser/renderer_context_menu/accessibility_labels_bubble_model_browsertest.cc",
       "../browser/renderer_context_menu/accessibility_labels_menu_observer_browsertest.cc",
       "../browser/renderer_context_menu/mock_render_view_context_menu.cc",
       "../browser/renderer_context_menu/mock_render_view_context_menu.h",
-- 
2.20.1

