From 148e55c5601286fc79089dae58dad58193fd3e6a Mon Sep 17 00:00:00 2001
From: Avi Drissman <avi@chromium.org>
Date: Thu, 10 Jun 2021 07:20:34 +0000
Subject: [PATCH 04/28] Fix UaF for the enhanced spell check bubble

For the enhanced spell check bubble, be sure to use a valid
WebContents for the help page. Adds a browser test.

Note that this is a clone of 427728383657e6ccb06dbfcce0c5118bb557c0af
that was committed to fix the same issue with the accessibility
bubble. Alas, these are the only two subclassers of ConfirmBubbleModel
across the Chromium codebase, and given that ConfirmBubbleModel is in
ui/ and can't know about this specific lifetime issue, this is the
simplest way forward.

(cherry picked from commit b427418352dc5a2e095aaa3f3dcd3c55d91dfbd4)

(cherry picked from commit 9f8ca0e35834223cb58ce777c9ccd49e903e7434)

Bug: 1212498
Test: As in bug
Change-Id: I365e9721613ea2a89a8fad902ddc137b24de687f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2920807
Commit-Queue: Istiaque Ahmed <lazyboy@chromium.org>
Auto-Submit: Avi Drissman <avi@chromium.org>
Reviewed-by: Katie Dektar <katie@chromium.org>
Reviewed-by: Istiaque Ahmed <lazyboy@chromium.org>
Cr-Original-Original-Commit-Position: refs/heads/master@{#887244}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2937516
Commit-Queue: Katie Dektar <katie@chromium.org>
Cr-Original-Commit-Position: refs/branch-heads/4472@{#1423}
Cr-Original-Branched-From: 3d60439cfb36485e76a1c5bb7f513d3721b20da1-refs/heads/master@{#870763}
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2944944
Owners-Override: Victor-Gabriel Savu <vsavu@google.com>
Reviewed-by: Artem Sumaneev <asumaneev@google.com>
Commit-Queue: Victor-Gabriel Savu <vsavu@google.com>
Cr-Commit-Position: refs/branch-heads/4240@{#1664}
Cr-Branched-From: f297677702651916bbf65e59c0d4bbd4ce57d1ee-refs/heads/master@{#800218}
---
 .../spelling_bubble_model.cc                  | 16 +++-
 .../spelling_bubble_model.h                   | 10 +-
 .../spelling_bubble_model_browsertest.cc      | 93 +++++++++++++++++++
 chrome/test/BUILD.gn                          |  1 +
 4 files changed, 112 insertions(+), 8 deletions(-)
 create mode 100644 chrome/browser/renderer_context_menu/spelling_bubble_model_browsertest.cc

diff --git a/chrome/browser/renderer_context_menu/spelling_bubble_model.cc b/chrome/browser/renderer_context_menu/spelling_bubble_model.cc
index 564d09d2a..59024248f 100644
--- a/chrome/browser/renderer_context_menu/spelling_bubble_model.cc
+++ b/chrome/browser/renderer_context_menu/spelling_bubble_model.cc
@@ -6,6 +6,8 @@
 
 #include "base/logging.h"
 #include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
@@ -13,6 +15,7 @@
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/web_contents.h"
+#include "content/public/browser/web_contents_observer.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/gfx/image/image.h"
@@ -23,10 +26,9 @@ using content::WebContents;
 
 SpellingBubbleModel::SpellingBubbleModel(Profile* profile,
                                          WebContents* web_contents)
-    : profile_(profile), web_contents_(web_contents) {}
+    : WebContentsObserver(web_contents), profile_(profile) {}
 
-SpellingBubbleModel::~SpellingBubbleModel() {
-}
+SpellingBubbleModel::~SpellingBubbleModel() = default;
 
 base::string16 SpellingBubbleModel::GetTitle() const {
   return l10n_util::GetStringUTF16(IDS_CONTENT_CONTEXT_SPELLING_BUBBLE_TITLE);
@@ -64,7 +66,13 @@ void SpellingBubbleModel::OpenHelpPage() {
   OpenURLParams params(GetHelpPageURL(), Referrer(),
                        WindowOpenDisposition::NEW_FOREGROUND_TAB,
                        ui::PAGE_TRANSITION_LINK, false);
-  web_contents_->OpenURL(params);
+  if (web_contents()) {
+    web_contents()->OpenURL(params);
+    return;
+  }
+  // The web contents used to open this dialog have been destroyed.
+  Browser* browser = chrome::ScopedTabbedBrowserDisplayer(profile_).browser();
+  browser->OpenURL(params);
 }
 
 void SpellingBubbleModel::SetPref(bool enabled) {
diff --git a/chrome/browser/renderer_context_menu/spelling_bubble_model.h b/chrome/browser/renderer_context_menu/spelling_bubble_model.h
index 55a5cb53a..4253336f1 100644
--- a/chrome/browser/renderer_context_menu/spelling_bubble_model.h
+++ b/chrome/browser/renderer_context_menu/spelling_bubble_model.h
@@ -8,6 +8,7 @@
 #include "base/compiler_specific.h"
 #include "base/macros.h"
 #include "chrome/browser/ui/confirm_bubble_model.h"
+#include "content/public/browser/web_contents_observer.h"
 
 class Profile;
 
@@ -17,10 +18,13 @@ class WebContents;
 
 // A class that implements a bubble menu shown when we confirm a user allows
 // integrating the spelling service of Google to Chrome.
-class SpellingBubbleModel : public ConfirmBubbleModel {
+class SpellingBubbleModel : public ConfirmBubbleModel,
+                            public content::WebContentsObserver {
  public:
   SpellingBubbleModel(Profile* profile, content::WebContents* web_contents);
   ~SpellingBubbleModel() override;
+  SpellingBubbleModel(const SpellingBubbleModel&) = delete;
+  SpellingBubbleModel& operator=(const SpellingBubbleModel&) = delete;
 
   // ConfirmBubbleModel implementation.
   base::string16 GetTitle() const override;
@@ -36,10 +40,8 @@ class SpellingBubbleModel : public ConfirmBubbleModel {
   // Set the profile preferences to enable or disable the feature.
   void SetPref(bool enabled);
 
+  // Unowned.
   Profile* profile_;
-  content::WebContents* web_contents_;
-
-  DISALLOW_COPY_AND_ASSIGN(SpellingBubbleModel);
 };
 
 #endif  // CHROME_BROWSER_RENDERER_CONTEXT_MENU_SPELLING_BUBBLE_MODEL_H_
diff --git a/chrome/browser/renderer_context_menu/spelling_bubble_model_browsertest.cc b/chrome/browser/renderer_context_menu/spelling_bubble_model_browsertest.cc
new file mode 100644
index 000000000..50dbe0b1b
--- /dev/null
+++ b/chrome/browser/renderer_context_menu/spelling_bubble_model_browsertest.cc
@@ -0,0 +1,93 @@
+// Copyright 2021 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/renderer_context_menu/spelling_bubble_model.h"
+
+#include <memory>
+
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/confirm_bubble.h"
+#include "chrome/browser/ui/tabs/tab_strip_model.h"
+#include "chrome/test/base/in_process_browser_test.h"
+#include "chrome/test/base/ui_test_utils.h"
+#include "components/prefs/pref_service.h"
+#include "components/spellcheck/browser/pref_names.h"
+#include "content/public/test/browser_test.h"
+#include "content/public/test/test_navigation_observer.h"
+#include "testing/gtest/include/gtest/gtest.h"
+#include "url/gurl.h"
+
+namespace {
+
+// A test class for the spelling confirmation bubble.
+class SpellingBubbleModelTest : public InProcessBrowserTest {
+ public:
+  SpellingBubbleModelTest() = default;
+  ~SpellingBubbleModelTest() override = default;
+  SpellingBubbleModelTest(const SpellingBubbleModelTest&) = delete;
+  SpellingBubbleModelTest& operator=(const SpellingBubbleModelTest&) = delete;
+
+  std::unique_ptr<SpellingBubbleModel> CreateSpellingBubble() {
+    content::WebContents* web_contents =
+        browser()->tab_strip_model()->GetActiveWebContents();
+    auto model = std::make_unique<SpellingBubbleModel>(browser()->profile(),
+                                                       web_contents);
+    return model;
+  }
+};
+
+}  // namespace
+
+IN_PROC_BROWSER_TEST_F(SpellingBubbleModelTest, ConfirmSetsPrefs) {
+  browser()->profile()->GetPrefs()->SetBoolean(
+      spellcheck::prefs::kSpellCheckUseSpellingService, false);
+  browser()->profile()->GetPrefs()->SetBoolean(
+      spellcheck::prefs::kSpellCheckEnable, false);
+  std::unique_ptr<SpellingBubbleModel> model = CreateSpellingBubble();
+  model->Accept();
+  EXPECT_TRUE(browser()->profile()->GetPrefs()->GetBoolean(
+      spellcheck::prefs::kSpellCheckUseSpellingService));
+  EXPECT_TRUE(browser()->profile()->GetPrefs()->GetBoolean(
+      spellcheck::prefs::kSpellCheckEnable));
+}
+
+IN_PROC_BROWSER_TEST_F(SpellingBubbleModelTest, CancelSetsPref) {
+  browser()->profile()->GetPrefs()->SetBoolean(
+      spellcheck::prefs::kSpellCheckUseSpellingService, true);
+  std::unique_ptr<SpellingBubbleModel> model = CreateSpellingBubble();
+  model->Cancel();
+  EXPECT_FALSE(browser()->profile()->GetPrefs()->GetBoolean(
+      spellcheck::prefs::kSpellCheckUseSpellingService));
+}
+
+IN_PROC_BROWSER_TEST_F(SpellingBubbleModelTest, OpenHelpPage) {
+  std::unique_ptr<SpellingBubbleModel> model = CreateSpellingBubble();
+  ui_test_utils::AllBrowserTabAddedWaiter waiter;
+  model->OpenHelpPage();
+  content::WebContents* web_contents = waiter.Wait();
+  EXPECT_EQ(web_contents->GetBrowserContext(), browser()->profile());
+  EXPECT_EQ(web_contents->GetURL(), model->GetHelpPageURL());
+}
+
+// Tests that closing the tab with WebContents that was used to construct the
+// SpellingBubbleModel does not cause any problems when opening the Help page.
+// This is a regression test for crbug.com/1212498.
+// Note that we do not need to test what happens when the whole browser
+// closes, because when the last tab in a window closes it will close the
+// bubble widget too.
+IN_PROC_BROWSER_TEST_F(SpellingBubbleModelTest,
+                       OpenHelpPageAfterWebContentsClosed) {
+  // Open a new tab so the whole browser does not close once we close
+  // the tab via WebContents::Close() below.
+  AddTabAtIndex(0, GURL("data:text/html,<p>puppies!</p>"),
+                ui::PAGE_TRANSITION_TYPED);
+  std::unique_ptr<SpellingBubbleModel> model = CreateSpellingBubble();
+  browser()->tab_strip_model()->GetActiveWebContents()->Close();
+  ui_test_utils::AllBrowserTabAddedWaiter waiter;
+  model->OpenHelpPage();
+  content::WebContents* web_contents = waiter.Wait();
+  EXPECT_EQ(web_contents->GetBrowserContext(), browser()->profile());
+  EXPECT_EQ(web_contents->GetURL(), model->GetHelpPageURL());
+}
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 9a70a1299..416a58055 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -1326,6 +1326,7 @@ if (!is_android) {
       "../browser/renderer_context_menu/render_view_context_menu_browsertest_util.h",
       "../browser/renderer_context_menu/render_view_context_menu_test_util.cc",
       "../browser/renderer_context_menu/render_view_context_menu_test_util.h",
+      "../browser/renderer_context_menu/spelling_bubble_model_browsertest.cc",
       "../browser/renderer_context_menu/spelling_menu_observer_browsertest.cc",
       "../browser/renderer_host/render_process_host_chrome_browsertest.cc",
       "../browser/repost_form_warning_browsertest.cc",
-- 
2.20.1

